/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface SdapiSdapiAutoPhotoshopSdSdapiV1PathGetRequest {
    path: string;
}

export interface SdapiSdapiAutoPhotoshopSdSdapiV1PathPostRequest {
    path: string;
}

/**
 * 
 */
export class AutoPhotoshopSDPluginAPIApi extends runtime.BaseAPI {

    /**
     * Changesdurl
     */
    async changeSdUrlSdapiAutoPhotoshopSdSdUrlPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/sd_url/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Changesdurl
     */
    async changeSdUrlSdapiAutoPhotoshopSdSdUrlPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.changeSdUrlSdapiAutoPhotoshopSdSdUrlPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Getinitimagehandle
     */
    async getInitImageHandleSdapiAutoPhotoshopSdGetInitImagePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/getInitImage/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Getinitimagehandle
     */
    async getInitImageHandleSdapiAutoPhotoshopSdGetInitImagePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getInitImageHandleSdapiAutoPhotoshopSdGetInitImagePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Getversion
     */
    async getVersionSdapiAutoPhotoshopSdVersionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Getversion
     */
    async getVersionSdapiAutoPhotoshopSdVersionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getVersionSdapiAutoPhotoshopSdVersionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Img2Imghandle
     */
    async img2ImgHandleSdapiAutoPhotoshopSdImg2imgPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/img2img/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Img2Imghandle
     */
    async img2ImgHandleSdapiAutoPhotoshopSdImg2imgPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.img2ImgHandleSdapiAutoPhotoshopSdImg2imgPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Loadhistory
     */
    async loadHistorySdapiAutoPhotoshopSdHistoryLoadPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/history/load`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Loadhistory
     */
    async loadHistorySdapiAutoPhotoshopSdHistoryLoadPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loadHistorySdapiAutoPhotoshopSdHistoryLoadPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Loadpromptshortcut
     */
    async loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutLoadPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/prompt_shortcut/load`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Loadpromptshortcut
     */
    async loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutLoadPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutLoadPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Loadpromptshortcut
     */
    async loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutSavePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/prompt_shortcut/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Loadpromptshortcut
     */
    async loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutSavePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutSavePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Maskexpansionhandler
     */
    async maskExpansionHandlerSdapiAutoPhotoshopSdMaskExpansionPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/mask/expansion/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Maskexpansionhandler
     */
    async maskExpansionHandlerSdapiAutoPhotoshopSdMaskExpansionPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.maskExpansionHandlerSdapiAutoPhotoshopSdMaskExpansionPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Openurl
     */
    async openUrlSdapiAutoPhotoshopSdOpenUrlPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/open/url/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Openurl
     */
    async openUrlSdapiAutoPhotoshopSdOpenUrlPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.openUrlSdapiAutoPhotoshopSdOpenUrlPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read Root
     */
    async readRootSdapiAutoPhotoshopSdGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Read Root
     */
    async readRootSdapiAutoPhotoshopSdGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.readRootSdapiAutoPhotoshopSdGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Savepng
     */
    async savePngSdapiAutoPhotoshopSdSavePngPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/save/png/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Savepng
     */
    async savePngSdapiAutoPhotoshopSdSavePngPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.savePngSdapiAutoPhotoshopSdSavePngPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sdapi
     */
    async sdapiSdapiAutoPhotoshopSdConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sdapi
     */
    async sdapiSdapiAutoPhotoshopSdConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sdapiSdapiAutoPhotoshopSdConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sdapi
     */
    async sdapiSdapiAutoPhotoshopSdSdapiV1PathGetRaw(requestParameters: SdapiSdapiAutoPhotoshopSdSdapiV1PathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling sdapiSdapiAutoPhotoshopSdSdapiV1PathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/sdapi/v1/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sdapi
     */
    async sdapiSdapiAutoPhotoshopSdSdapiV1PathGet(requestParameters: SdapiSdapiAutoPhotoshopSdSdapiV1PathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sdapiSdapiAutoPhotoshopSdSdapiV1PathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sdapi
     */
    async sdapiSdapiAutoPhotoshopSdSdapiV1PathPostRaw(requestParameters: SdapiSdapiAutoPhotoshopSdSdapiV1PathPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling sdapiSdapiAutoPhotoshopSdSdapiV1PathPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/sdapi/v1/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sdapi
     */
    async sdapiSdapiAutoPhotoshopSdSdapiV1PathPost(requestParameters: SdapiSdapiAutoPhotoshopSdSdapiV1PathPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sdapiSdapiAutoPhotoshopSdSdapiV1PathPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searchimage
     */
    async searchImageSdapiAutoPhotoshopSdSearchImagePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/search/image/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Searchimage
     */
    async searchImageSdapiAutoPhotoshopSdSearchImagePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchImageSdapiAutoPhotoshopSdSearchImagePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Swapmodel
     */
    async swapModelSdapiAutoPhotoshopSdSwapModelPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/swapModel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Swapmodel
     */
    async swapModelSdapiAutoPhotoshopSdSwapModelPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.swapModelSdapiAutoPhotoshopSdSwapModelPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Txt2Imghandle
     */
    async txt2ImgHandleSdapiAutoPhotoshopSdTxt2imgPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/auto-photoshop-sd/txt2img/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Txt2Imghandle
     */
    async txt2ImgHandleSdapiAutoPhotoshopSdTxt2imgPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.txt2ImgHandleSdapiAutoPhotoshopSdTxt2imgPostRaw(initOverrides);
        return await response.value();
    }

}
