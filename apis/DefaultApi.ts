/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BodyDetectControlnetDetectPost,
  ControlNetStableDiffusionProcessingImg2Img,
  ControlNetStableDiffusionProcessingTxt2Img,
  CreateResponse,
  EmbeddingsResponse,
  Estimation,
  ExtrasBatchImagesRequest,
  ExtrasBatchImagesResponse,
  ExtrasSingleImageRequest,
  ExtrasSingleImageResponse,
  FaceRestorerItem,
  Flags,
  HTTPValidationError,
  HypernetworkItem,
  ImageToImageResponse,
  InterrogateRequest,
  MemoryResponse,
  ModulesApiModelsProgressResponse,
  ModulesProgressProgressResponse,
  Options,
  PNGInfoRequest,
  PNGInfoResponse,
  PredictBody,
  PreprocessResponse,
  ProgressRequest,
  PromptStyleItem,
  RealesrganItem,
  ResetBody,
  SDModelItem,
  SamplerItem,
  ScriptsList,
  StableDiffusionProcessingImg2Img,
  StableDiffusionProcessingTxt2Img,
  TextToImageResponse,
  TrainResponse,
  UpscalerItem,
} from '../models';
import {
    BodyDetectControlnetDetectPostFromJSON,
    BodyDetectControlnetDetectPostToJSON,
    ControlNetStableDiffusionProcessingImg2ImgFromJSON,
    ControlNetStableDiffusionProcessingImg2ImgToJSON,
    ControlNetStableDiffusionProcessingTxt2ImgFromJSON,
    ControlNetStableDiffusionProcessingTxt2ImgToJSON,
    CreateResponseFromJSON,
    CreateResponseToJSON,
    EmbeddingsResponseFromJSON,
    EmbeddingsResponseToJSON,
    EstimationFromJSON,
    EstimationToJSON,
    ExtrasBatchImagesRequestFromJSON,
    ExtrasBatchImagesRequestToJSON,
    ExtrasBatchImagesResponseFromJSON,
    ExtrasBatchImagesResponseToJSON,
    ExtrasSingleImageRequestFromJSON,
    ExtrasSingleImageRequestToJSON,
    ExtrasSingleImageResponseFromJSON,
    ExtrasSingleImageResponseToJSON,
    FaceRestorerItemFromJSON,
    FaceRestorerItemToJSON,
    FlagsFromJSON,
    FlagsToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HypernetworkItemFromJSON,
    HypernetworkItemToJSON,
    ImageToImageResponseFromJSON,
    ImageToImageResponseToJSON,
    InterrogateRequestFromJSON,
    InterrogateRequestToJSON,
    MemoryResponseFromJSON,
    MemoryResponseToJSON,
    ModulesApiModelsProgressResponseFromJSON,
    ModulesApiModelsProgressResponseToJSON,
    ModulesProgressProgressResponseFromJSON,
    ModulesProgressProgressResponseToJSON,
    OptionsFromJSON,
    OptionsToJSON,
    PNGInfoRequestFromJSON,
    PNGInfoRequestToJSON,
    PNGInfoResponseFromJSON,
    PNGInfoResponseToJSON,
    PredictBodyFromJSON,
    PredictBodyToJSON,
    PreprocessResponseFromJSON,
    PreprocessResponseToJSON,
    ProgressRequestFromJSON,
    ProgressRequestToJSON,
    PromptStyleItemFromJSON,
    PromptStyleItemToJSON,
    RealesrganItemFromJSON,
    RealesrganItemToJSON,
    ResetBodyFromJSON,
    ResetBodyToJSON,
    SDModelItemFromJSON,
    SDModelItemToJSON,
    SamplerItemFromJSON,
    SamplerItemToJSON,
    ScriptsListFromJSON,
    ScriptsListToJSON,
    StableDiffusionProcessingImg2ImgFromJSON,
    StableDiffusionProcessingImg2ImgToJSON,
    StableDiffusionProcessingTxt2ImgFromJSON,
    StableDiffusionProcessingTxt2ImgToJSON,
    TextToImageResponseFromJSON,
    TextToImageResponseToJSON,
    TrainResponseFromJSON,
    TrainResponseToJSON,
    UpscalerItemFromJSON,
    UpscalerItemToJSON,
} from '../models';

export interface BuildResourceAssetsPathGetRequest {
    path: string;
}

export interface ControlnetImg2imgControlnetImg2imgPostRequest {
    controlNetStableDiffusionProcessingImg2Img: ControlNetStableDiffusionProcessingImg2Img;
}

export interface ControlnetTxt2imgControlnetTxt2imgPostRequest {
    controlNetStableDiffusionProcessingTxt2Img: ControlNetStableDiffusionProcessingTxt2Img;
}

export interface CreateEmbeddingSdapiV1CreateEmbeddingPostRequest {
    body: object;
}

export interface CreateHypernetworkSdapiV1CreateHypernetworkPostRequest {
    body: object;
}

export interface DetectControlnetDetectPostRequest {
    bodyDetectControlnetDetectPost?: BodyDetectControlnetDetectPost;
}

export interface ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest {
    extrasBatchImagesRequest: ExtrasBatchImagesRequest;
}

export interface ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest {
    extrasSingleImageRequest: ExtrasSingleImageRequest;
}

export interface FetchFileSdExtraNetworksThumbGetRequest {
    filename?: string;
}

export interface FileDeprecatedFilePathGetRequest {
    path: string;
}

export interface FileFilePathGetRequest {
    path: string;
}

export interface Img2imgapiSdapiV1Img2imgPostRequest {
    stableDiffusionProcessingImg2Img: StableDiffusionProcessingImg2Img;
}

export interface InterrogateapiSdapiV1InterrogatePostRequest {
    interrogateRequest: InterrogateRequest;
}

export interface LoginLoginPostRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface LoginLoginPost0Request {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface ModuleListControlnetModuleListGetRequest {
    aliasNames?: boolean;
}

export interface PnginfoapiSdapiV1PngInfoPostRequest {
    pNGInfoRequest: PNGInfoRequest;
}

export interface PredictApiApiNamePostRequest {
    apiName: string;
    predictBody: PredictBody;
}

export interface PredictApiApiNamePost0Request {
    apiName: string;
    predictBody: PredictBody;
}

export interface PredictRunApiNamePostRequest {
    apiName: string;
    predictBody: PredictBody;
}

export interface PredictRunApiNamePost0Request {
    apiName: string;
    predictBody: PredictBody;
}

export interface PreprocessSdapiV1PreprocessPostRequest {
    body: object;
}

export interface ProgressapiInternalProgressPostRequest {
    progressRequest: ProgressRequest;
}

export interface ProgressapiSdapiV1ProgressGetRequest {
    skipCurrentImage?: boolean;
}

export interface ResetIteratorResetPostRequest {
    resetBody: ResetBody;
}

export interface ResetIteratorResetPost0Request {
    resetBody: ResetBody;
}

export interface SetConfigSdapiV1OptionsPostRequest {
    body: object;
}

export interface StaticResourceStaticPathGetRequest {
    path: string;
}

export interface Text2imgapiSdapiV1Txt2imgPostRequest {
    stableDiffusionProcessingTxt2Img: StableDiffusionProcessingTxt2Img;
}

export interface TrainEmbeddingSdapiV1TrainEmbeddingPostRequest {
    body: object;
}

export interface TrainHypernetworkSdapiV1TrainHypernetworkPostRequest {
    body: object;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * App Id
     */
    async appIdAppIdGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app_id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * App Id
     */
    async appIdAppIdGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appIdAppIdGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * App Id
     */
    async appIdAppIdGet_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app_id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * App Id
     */
    async appIdAppIdGet_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appIdAppIdGet_1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Build Resource
     */
    async buildResourceAssetsPathGetRaw(requestParameters: BuildResourceAssetsPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling buildResourceAssetsPathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assets/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Build Resource
     */
    async buildResourceAssetsPathGet(requestParameters: BuildResourceAssetsPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.buildResourceAssetsPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Controlnet Img2Img
     */
    async controlnetImg2imgControlnetImg2imgPostRaw(requestParameters: ControlnetImg2imgControlnetImg2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageToImageResponse>> {
        if (requestParameters.controlNetStableDiffusionProcessingImg2Img === null || requestParameters.controlNetStableDiffusionProcessingImg2Img === undefined) {
            throw new runtime.RequiredError('controlNetStableDiffusionProcessingImg2Img','Required parameter requestParameters.controlNetStableDiffusionProcessingImg2Img was null or undefined when calling controlnetImg2imgControlnetImg2imgPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/controlnet/img2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControlNetStableDiffusionProcessingImg2ImgToJSON(requestParameters.controlNetStableDiffusionProcessingImg2Img),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageToImageResponseFromJSON(jsonValue));
    }

    /**
     * Controlnet Img2Img
     */
    async controlnetImg2imgControlnetImg2imgPost(requestParameters: ControlnetImg2imgControlnetImg2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageToImageResponse> {
        const response = await this.controlnetImg2imgControlnetImg2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Controlnet Txt2Img
     */
    async controlnetTxt2imgControlnetTxt2imgPostRaw(requestParameters: ControlnetTxt2imgControlnetTxt2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextToImageResponse>> {
        if (requestParameters.controlNetStableDiffusionProcessingTxt2Img === null || requestParameters.controlNetStableDiffusionProcessingTxt2Img === undefined) {
            throw new runtime.RequiredError('controlNetStableDiffusionProcessingTxt2Img','Required parameter requestParameters.controlNetStableDiffusionProcessingTxt2Img was null or undefined when calling controlnetTxt2imgControlnetTxt2imgPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/controlnet/txt2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControlNetStableDiffusionProcessingTxt2ImgToJSON(requestParameters.controlNetStableDiffusionProcessingTxt2Img),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextToImageResponseFromJSON(jsonValue));
    }

    /**
     * Controlnet Txt2Img
     */
    async controlnetTxt2imgControlnetTxt2imgPost(requestParameters: ControlnetTxt2imgControlnetTxt2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextToImageResponse> {
        const response = await this.controlnetTxt2imgControlnetTxt2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Embedding
     */
    async createEmbeddingSdapiV1CreateEmbeddingPostRaw(requestParameters: CreateEmbeddingSdapiV1CreateEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createEmbeddingSdapiV1CreateEmbeddingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/create/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Embedding
     */
    async createEmbeddingSdapiV1CreateEmbeddingPost(requestParameters: CreateEmbeddingSdapiV1CreateEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createEmbeddingSdapiV1CreateEmbeddingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Hypernetwork
     */
    async createHypernetworkSdapiV1CreateHypernetworkPostRaw(requestParameters: CreateHypernetworkSdapiV1CreateHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createHypernetworkSdapiV1CreateHypernetworkPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/create/hypernetwork`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Hypernetwork
     */
    async createHypernetworkSdapiV1CreateHypernetworkPost(requestParameters: CreateHypernetworkSdapiV1CreateHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createHypernetworkSdapiV1CreateHypernetworkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detect
     */
    async detectControlnetDetectPostRaw(requestParameters: DetectControlnetDetectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/controlnet/detect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyDetectControlnetDetectPostToJSON(requestParameters.bodyDetectControlnetDetectPost),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Detect
     */
    async detectControlnetDetectPost(requestParameters: DetectControlnetDetectPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.detectControlnetDetectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extras Batch Images Api
     */
    async extrasBatchImagesApiSdapiV1ExtraBatchImagesPostRaw(requestParameters: ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtrasBatchImagesResponse>> {
        if (requestParameters.extrasBatchImagesRequest === null || requestParameters.extrasBatchImagesRequest === undefined) {
            throw new runtime.RequiredError('extrasBatchImagesRequest','Required parameter requestParameters.extrasBatchImagesRequest was null or undefined when calling extrasBatchImagesApiSdapiV1ExtraBatchImagesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/extra-batch-images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtrasBatchImagesRequestToJSON(requestParameters.extrasBatchImagesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtrasBatchImagesResponseFromJSON(jsonValue));
    }

    /**
     * Extras Batch Images Api
     */
    async extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(requestParameters: ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtrasBatchImagesResponse> {
        const response = await this.extrasBatchImagesApiSdapiV1ExtraBatchImagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extras Single Image Api
     */
    async extrasSingleImageApiSdapiV1ExtraSingleImagePostRaw(requestParameters: ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtrasSingleImageResponse>> {
        if (requestParameters.extrasSingleImageRequest === null || requestParameters.extrasSingleImageRequest === undefined) {
            throw new runtime.RequiredError('extrasSingleImageRequest','Required parameter requestParameters.extrasSingleImageRequest was null or undefined when calling extrasSingleImageApiSdapiV1ExtraSingleImagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/extra-single-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtrasSingleImageRequestToJSON(requestParameters.extrasSingleImageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtrasSingleImageResponseFromJSON(jsonValue));
    }

    /**
     * Extras Single Image Api
     */
    async extrasSingleImageApiSdapiV1ExtraSingleImagePost(requestParameters: ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtrasSingleImageResponse> {
        const response = await this.extrasSingleImageApiSdapiV1ExtraSingleImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Favicon
     */
    async faviconFaviconIcoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/favicon.ico`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Favicon
     */
    async faviconFaviconIcoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.faviconFaviconIcoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch File
     */
    async fetchFileSdExtraNetworksThumbGetRaw(requestParameters: FetchFileSdExtraNetworksThumbGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.filename !== undefined) {
            queryParameters['filename'] = requestParameters.filename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sd_extra_networks/thumb`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Fetch File
     */
    async fetchFileSdExtraNetworksThumbGet(requestParameters: FetchFileSdExtraNetworksThumbGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fetchFileSdExtraNetworksThumbGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * File Deprecated
     */
    async fileDeprecatedFilePathGetRaw(requestParameters: FileDeprecatedFilePathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling fileDeprecatedFilePathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * File Deprecated
     */
    async fileDeprecatedFilePathGet(requestParameters: FileDeprecatedFilePathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fileDeprecatedFilePathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * File
     */
    async fileFilePathGetRaw(requestParameters: FileFilePathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling fileFilePathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file={path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * File
     */
    async fileFilePathGet(requestParameters: FileFilePathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fileFilePathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Cmd Flags
     */
    async getCmdFlagsSdapiV1CmdFlagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flags>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/cmd-flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagsFromJSON(jsonValue));
    }

    /**
     * Get Cmd Flags
     */
    async getCmdFlagsSdapiV1CmdFlagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flags> {
        const response = await this.getCmdFlagsSdapiV1CmdFlagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Config
     */
    async getConfigConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Config
     */
    async getConfigConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getConfigConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Config
     */
    async getConfigConfigGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Config
     */
    async getConfigConfigGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getConfigConfigGet_2Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get Config
     */
    async getConfigSdapiV1OptionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Options>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionsFromJSON(jsonValue));
    }

    /**
     * Get Config
     */
    async getConfigSdapiV1OptionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Options> {
        const response = await this.getConfigSdapiV1OptionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCurrentUserUserGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGet_3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCurrentUserUserGet_3Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get Embeddings
     */
    async getEmbeddingsSdapiV1EmbeddingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/embeddings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingsResponseFromJSON(jsonValue));
    }

    /**
     * Get Embeddings
     */
    async getEmbeddingsSdapiV1EmbeddingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingsResponse> {
        const response = await this.getEmbeddingsSdapiV1EmbeddingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Face Restorers
     */
    async getFaceRestorersSdapiV1FaceRestorersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FaceRestorerItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/face-restorers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FaceRestorerItemFromJSON));
    }

    /**
     * Get Face Restorers
     */
    async getFaceRestorersSdapiV1FaceRestorersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FaceRestorerItem>> {
        const response = await this.getFaceRestorersSdapiV1FaceRestorersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Hypernetworks
     */
    async getHypernetworksSdapiV1HypernetworksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HypernetworkItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/hypernetworks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HypernetworkItemFromJSON));
    }

    /**
     * Get Hypernetworks
     */
    async getHypernetworksSdapiV1HypernetworksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HypernetworkItem>> {
        const response = await this.getHypernetworksSdapiV1HypernetworksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Memory
     */
    async getMemorySdapiV1MemoryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemoryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/memory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemoryResponseFromJSON(jsonValue));
    }

    /**
     * Get Memory
     */
    async getMemorySdapiV1MemoryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemoryResponse> {
        const response = await this.getMemorySdapiV1MemoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Prompt Styles
     */
    async getPromptStylesSdapiV1PromptStylesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PromptStyleItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/prompt-styles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PromptStyleItemFromJSON));
    }

    /**
     * Get Prompt Styles
     */
    async getPromptStylesSdapiV1PromptStylesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PromptStyleItem>> {
        const response = await this.getPromptStylesSdapiV1PromptStylesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Queue Status
     */
    async getQueueStatusQueueStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Estimation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/queue/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EstimationFromJSON(jsonValue));
    }

    /**
     * Get Queue Status
     */
    async getQueueStatusQueueStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Estimation> {
        const response = await this.getQueueStatusQueueStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Realesrgan Models
     */
    async getRealesrganModelsSdapiV1RealesrganModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RealesrganItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/realesrgan-models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RealesrganItemFromJSON));
    }

    /**
     * Get Realesrgan Models
     */
    async getRealesrganModelsSdapiV1RealesrganModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RealesrganItem>> {
        const response = await this.getRealesrganModelsSdapiV1RealesrganModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Samplers
     */
    async getSamplersSdapiV1SamplersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SamplerItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/samplers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SamplerItemFromJSON));
    }

    /**
     * Get Samplers
     */
    async getSamplersSdapiV1SamplersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SamplerItem>> {
        const response = await this.getSamplersSdapiV1SamplersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Scripts List
     */
    async getScriptsListSdapiV1ScriptsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScriptsList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/scripts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptsListFromJSON(jsonValue));
    }

    /**
     * Get Scripts List
     */
    async getScriptsListSdapiV1ScriptsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScriptsList> {
        const response = await this.getScriptsListSdapiV1ScriptsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Sd Models
     */
    async getSdModelsSdapiV1SdModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SDModelItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/sd-models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SDModelItemFromJSON));
    }

    /**
     * Get Sd Models
     */
    async getSdModelsSdapiV1SdModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SDModelItem>> {
        const response = await this.getSdModelsSdapiV1SdModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Token
     */
    async getTokenTokenGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/token/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Token
     */
    async getTokenTokenGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getTokenTokenGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Token
     */
    async getTokenTokenGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Token
     */
    async getTokenTokenGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getTokenTokenGet_4Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get Upscalers
     */
    async getUpscalersSdapiV1UpscalersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UpscalerItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/upscalers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UpscalerItemFromJSON));
    }

    /**
     * Get Upscalers
     */
    async getUpscalersSdapiV1UpscalersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UpscalerItem>> {
        const response = await this.getUpscalersSdapiV1UpscalersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Img2Imgapi
     */
    async img2imgapiSdapiV1Img2imgPostRaw(requestParameters: Img2imgapiSdapiV1Img2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageToImageResponse>> {
        if (requestParameters.stableDiffusionProcessingImg2Img === null || requestParameters.stableDiffusionProcessingImg2Img === undefined) {
            throw new runtime.RequiredError('stableDiffusionProcessingImg2Img','Required parameter requestParameters.stableDiffusionProcessingImg2Img was null or undefined when calling img2imgapiSdapiV1Img2imgPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/img2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StableDiffusionProcessingImg2ImgToJSON(requestParameters.stableDiffusionProcessingImg2Img),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageToImageResponseFromJSON(jsonValue));
    }

    /**
     * Img2Imgapi
     */
    async img2imgapiSdapiV1Img2imgPost(requestParameters: Img2imgapiSdapiV1Img2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageToImageResponse> {
        const response = await this.img2imgapiSdapiV1Img2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Interrogateapi
     */
    async interrogateapiSdapiV1InterrogatePostRaw(requestParameters: InterrogateapiSdapiV1InterrogatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.interrogateRequest === null || requestParameters.interrogateRequest === undefined) {
            throw new runtime.RequiredError('interrogateRequest','Required parameter requestParameters.interrogateRequest was null or undefined when calling interrogateapiSdapiV1InterrogatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/interrogate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InterrogateRequestToJSON(requestParameters.interrogateRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Interrogateapi
     */
    async interrogateapiSdapiV1InterrogatePost(requestParameters: InterrogateapiSdapiV1InterrogatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.interrogateapiSdapiV1InterrogatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Interruptapi
     */
    async interruptapiSdapiV1InterruptPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/interrupt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Interruptapi
     */
    async interruptapiSdapiV1InterruptPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.interruptapiSdapiV1InterruptPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login_check/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginCheckLoginCheckGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGet_5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login_check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGet_5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginCheckLoginCheckGet_5Raw(initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginLoginPostRaw(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling loginLoginPost.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login
     */
    async loginLoginPost(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginLoginPost_6Raw(requestParameters: LoginLoginPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling loginLoginPost_6.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginLoginPost_6.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login
     */
    async loginLoginPost_6(requestParameters: LoginLoginPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginLoginPost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Main
     */
    async mainGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Main
     */
    async mainGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.mainGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Main
     */
    async mainHeadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Main
     */
    async mainHead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.mainHeadRaw(initOverrides);
        return await response.value();
    }

    /**
     * Model List
     */
    async modelListControlnetModelListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/model_list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Model List
     */
    async modelListControlnetModelListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.modelListControlnetModelListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Module List
     */
    async moduleListControlnetModuleListGetRaw(requestParameters: ModuleListControlnetModuleListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.aliasNames !== undefined) {
            queryParameters['alias_names'] = requestParameters.aliasNames;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/module_list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Module List
     */
    async moduleListControlnetModuleListGet(requestParameters: ModuleListControlnetModuleListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.moduleListControlnetModuleListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pnginfoapi
     */
    async pnginfoapiSdapiV1PngInfoPostRaw(requestParameters: PnginfoapiSdapiV1PngInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PNGInfoResponse>> {
        if (requestParameters.pNGInfoRequest === null || requestParameters.pNGInfoRequest === undefined) {
            throw new runtime.RequiredError('pNGInfoRequest','Required parameter requestParameters.pNGInfoRequest was null or undefined when calling pnginfoapiSdapiV1PngInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/png-info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PNGInfoRequestToJSON(requestParameters.pNGInfoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PNGInfoResponseFromJSON(jsonValue));
    }

    /**
     * Pnginfoapi
     */
    async pnginfoapiSdapiV1PngInfoPost(requestParameters: PnginfoapiSdapiV1PngInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PNGInfoResponse> {
        const response = await this.pnginfoapiSdapiV1PngInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictApiApiNamePostRaw(requestParameters: PredictApiApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.apiName === null || requestParameters.apiName === undefined) {
            throw new runtime.RequiredError('apiName','Required parameter requestParameters.apiName was null or undefined when calling predictApiApiNamePost.');
        }

        if (requestParameters.predictBody === null || requestParameters.predictBody === undefined) {
            throw new runtime.RequiredError('predictBody','Required parameter requestParameters.predictBody was null or undefined when calling predictApiApiNamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/{api_name}/`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters.apiName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters.predictBody),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictApiApiNamePost(requestParameters: PredictApiApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictApiApiNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictApiApiNamePost_7Raw(requestParameters: PredictApiApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.apiName === null || requestParameters.apiName === undefined) {
            throw new runtime.RequiredError('apiName','Required parameter requestParameters.apiName was null or undefined when calling predictApiApiNamePost_7.');
        }

        if (requestParameters.predictBody === null || requestParameters.predictBody === undefined) {
            throw new runtime.RequiredError('predictBody','Required parameter requestParameters.predictBody was null or undefined when calling predictApiApiNamePost_7.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/{api_name}`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters.apiName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters.predictBody),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictApiApiNamePost_7(requestParameters: PredictApiApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictApiApiNamePost_7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictRunApiNamePostRaw(requestParameters: PredictRunApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.apiName === null || requestParameters.apiName === undefined) {
            throw new runtime.RequiredError('apiName','Required parameter requestParameters.apiName was null or undefined when calling predictRunApiNamePost.');
        }

        if (requestParameters.predictBody === null || requestParameters.predictBody === undefined) {
            throw new runtime.RequiredError('predictBody','Required parameter requestParameters.predictBody was null or undefined when calling predictRunApiNamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/run/{api_name}/`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters.apiName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters.predictBody),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictRunApiNamePost(requestParameters: PredictRunApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictRunApiNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictRunApiNamePost_8Raw(requestParameters: PredictRunApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.apiName === null || requestParameters.apiName === undefined) {
            throw new runtime.RequiredError('apiName','Required parameter requestParameters.apiName was null or undefined when calling predictRunApiNamePost_8.');
        }

        if (requestParameters.predictBody === null || requestParameters.predictBody === undefined) {
            throw new runtime.RequiredError('predictBody','Required parameter requestParameters.predictBody was null or undefined when calling predictRunApiNamePost_8.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/run/{api_name}`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters.apiName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters.predictBody),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictRunApiNamePost_8(requestParameters: PredictRunApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictRunApiNamePost_8Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preprocess
     */
    async preprocessSdapiV1PreprocessPostRaw(requestParameters: PreprocessSdapiV1PreprocessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreprocessResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling preprocessSdapiV1PreprocessPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/preprocess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreprocessResponseFromJSON(jsonValue));
    }

    /**
     * Preprocess
     */
    async preprocessSdapiV1PreprocessPost(requestParameters: PreprocessSdapiV1PreprocessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreprocessResponse> {
        const response = await this.preprocessSdapiV1PreprocessPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Progressapi
     */
    async progressapiInternalProgressPostRaw(requestParameters: ProgressapiInternalProgressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModulesProgressProgressResponse>> {
        if (requestParameters.progressRequest === null || requestParameters.progressRequest === undefined) {
            throw new runtime.RequiredError('progressRequest','Required parameter requestParameters.progressRequest was null or undefined when calling progressapiInternalProgressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/internal/progress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProgressRequestToJSON(requestParameters.progressRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModulesProgressProgressResponseFromJSON(jsonValue));
    }

    /**
     * Progressapi
     */
    async progressapiInternalProgressPost(requestParameters: ProgressapiInternalProgressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModulesProgressProgressResponse> {
        const response = await this.progressapiInternalProgressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Progressapi
     */
    async progressapiSdapiV1ProgressGetRaw(requestParameters: ProgressapiSdapiV1ProgressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModulesApiModelsProgressResponse>> {
        const queryParameters: any = {};

        if (requestParameters.skipCurrentImage !== undefined) {
            queryParameters['skip_current_image'] = requestParameters.skipCurrentImage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/progress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModulesApiModelsProgressResponseFromJSON(jsonValue));
    }

    /**
     * Progressapi
     */
    async progressapiSdapiV1ProgressGet(requestParameters: ProgressapiSdapiV1ProgressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModulesApiModelsProgressResponse> {
        const response = await this.progressapiSdapiV1ProgressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh Checkpoints
     */
    async refreshCheckpointsSdapiV1RefreshCheckpointsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-checkpoints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Refresh Checkpoints
     */
    async refreshCheckpointsSdapiV1RefreshCheckpointsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.refreshCheckpointsSdapiV1RefreshCheckpointsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPostRaw(requestParameters: ResetIteratorResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.resetBody === null || requestParameters.resetBody === undefined) {
            throw new runtime.RequiredError('resetBody','Required parameter requestParameters.resetBody was null or undefined when calling resetIteratorResetPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetBodyToJSON(requestParameters.resetBody),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPost(requestParameters: ResetIteratorResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.resetIteratorResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPost_9Raw(requestParameters: ResetIteratorResetPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.resetBody === null || requestParameters.resetBody === undefined) {
            throw new runtime.RequiredError('resetBody','Required parameter requestParameters.resetBody was null or undefined when calling resetIteratorResetPost_9.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reset/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetBodyToJSON(requestParameters.resetBody),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPost_9(requestParameters: ResetIteratorResetPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.resetIteratorResetPost_9Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Robots Txt
     */
    async robotsTxtRobotsTxtGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/robots.txt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Robots Txt
     */
    async robotsTxtRobotsTxtGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.robotsTxtRobotsTxtGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Config
     */
    async setConfigSdapiV1OptionsPostRaw(requestParameters: SetConfigSdapiV1OptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setConfigSdapiV1OptionsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set Config
     */
    async setConfigSdapiV1OptionsPost(requestParameters: SetConfigSdapiV1OptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setConfigSdapiV1OptionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Skip
     */
    async skipSdapiV1SkipPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/skip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Skip
     */
    async skipSdapiV1SkipPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.skipSdapiV1SkipPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Startup Events
     */
    async startupEventsStartupEventsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/startup-events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Startup Events
     */
    async startupEventsStartupEventsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.startupEventsStartupEventsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Static Resource
     */
    async staticResourceStaticPathGetRaw(requestParameters: StaticResourceStaticPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling staticResourceStaticPathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/static/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Static Resource
     */
    async staticResourceStaticPathGet(requestParameters: StaticResourceStaticPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.staticResourceStaticPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Text2Imgapi
     */
    async text2imgapiSdapiV1Txt2imgPostRaw(requestParameters: Text2imgapiSdapiV1Txt2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextToImageResponse>> {
        if (requestParameters.stableDiffusionProcessingTxt2Img === null || requestParameters.stableDiffusionProcessingTxt2Img === undefined) {
            throw new runtime.RequiredError('stableDiffusionProcessingTxt2Img','Required parameter requestParameters.stableDiffusionProcessingTxt2Img was null or undefined when calling text2imgapiSdapiV1Txt2imgPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/txt2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StableDiffusionProcessingTxt2ImgToJSON(requestParameters.stableDiffusionProcessingTxt2Img),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextToImageResponseFromJSON(jsonValue));
    }

    /**
     * Text2Imgapi
     */
    async text2imgapiSdapiV1Txt2imgPost(requestParameters: Text2imgapiSdapiV1Txt2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextToImageResponse> {
        const response = await this.text2imgapiSdapiV1Txt2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Train Embedding
     */
    async trainEmbeddingSdapiV1TrainEmbeddingPostRaw(requestParameters: TrainEmbeddingSdapiV1TrainEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrainResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling trainEmbeddingSdapiV1TrainEmbeddingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/train/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainResponseFromJSON(jsonValue));
    }

    /**
     * Train Embedding
     */
    async trainEmbeddingSdapiV1TrainEmbeddingPost(requestParameters: TrainEmbeddingSdapiV1TrainEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrainResponse> {
        const response = await this.trainEmbeddingSdapiV1TrainEmbeddingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Train Hypernetwork
     */
    async trainHypernetworkSdapiV1TrainHypernetworkPostRaw(requestParameters: TrainHypernetworkSdapiV1TrainHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrainResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling trainHypernetworkSdapiV1TrainHypernetworkPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/train/hypernetwork`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainResponseFromJSON(jsonValue));
    }

    /**
     * Train Hypernetwork
     */
    async trainHypernetworkSdapiV1TrainHypernetworkPost(requestParameters: TrainHypernetworkSdapiV1TrainHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrainResponse> {
        const response = await this.trainHypernetworkSdapiV1TrainHypernetworkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Version
     */
    async versionControlnetVersionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Version
     */
    async versionControlnetVersionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.versionControlnetVersionGetRaw(initOverrides);
        return await response.value();
    }

}
