/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModulesProgressProgressResponse
 */
export interface ModulesProgressProgressResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ModulesProgressProgressResponse
     */
    active: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModulesProgressProgressResponse
     */
    queued: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModulesProgressProgressResponse
     */
    completed: boolean;
    /**
     * The progress with a range of 0 to 1
     * @type {number}
     * @memberof ModulesProgressProgressResponse
     */
    progress?: number;
    /**
     * 
     * @type {number}
     * @memberof ModulesProgressProgressResponse
     */
    eta?: number;
    /**
     * Current live preview; a data: uri
     * @type {string}
     * @memberof ModulesProgressProgressResponse
     */
    livePreview?: string;
    /**
     * Send this together with next request to prevent receiving same image
     * @type {number}
     * @memberof ModulesProgressProgressResponse
     */
    idLivePreview?: number;
    /**
     * Info text used by WebUI.
     * @type {string}
     * @memberof ModulesProgressProgressResponse
     */
    textinfo?: string;
}

/**
 * Check if a given object implements the ModulesProgressProgressResponse interface.
 */
export function instanceOfModulesProgressProgressResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "active" in value;
    isInstance = isInstance && "queued" in value;
    isInstance = isInstance && "completed" in value;

    return isInstance;
}

export function ModulesProgressProgressResponseFromJSON(json: any): ModulesProgressProgressResponse {
    return ModulesProgressProgressResponseFromJSONTyped(json, false);
}

export function ModulesProgressProgressResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModulesProgressProgressResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'queued': json['queued'],
        'completed': json['completed'],
        'progress': !exists(json, 'progress') ? undefined : json['progress'],
        'eta': !exists(json, 'eta') ? undefined : json['eta'],
        'livePreview': !exists(json, 'live_preview') ? undefined : json['live_preview'],
        'idLivePreview': !exists(json, 'id_live_preview') ? undefined : json['id_live_preview'],
        'textinfo': !exists(json, 'textinfo') ? undefined : json['textinfo'],
    };
}

export function ModulesProgressProgressResponseToJSON(value?: ModulesProgressProgressResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'queued': value.queued,
        'completed': value.completed,
        'progress': value.progress,
        'eta': value.eta,
        'live_preview': value.livePreview,
        'id_live_preview': value.idLivePreview,
        'textinfo': value.textinfo,
    };
}

