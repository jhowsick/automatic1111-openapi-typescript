/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";

/**
 *
 * @export
 * @interface Options
 */
export interface Options {
  /**
   * Always save all generated images
   * @type {boolean}
   * @memberof Options
   */
  samplesSave?: boolean;
  /**
   * File format for images
   * @type {string}
   * @memberof Options
   */
  samplesFormat?: string;
  /**
   * Images filename pattern
   * @type {string}
   * @memberof Options
   */
  samplesFilenamePattern?: string;
  /**
   * Add number to filename when saving
   * @type {boolean}
   * @memberof Options
   */
  saveImagesAddNumber?: boolean;
  /**
   * Always save all generated image grids
   * @type {boolean}
   * @memberof Options
   */
  gridSave?: boolean;
  /**
   * File format for grids
   * @type {string}
   * @memberof Options
   */
  gridFormat?: string;
  /**
   * Add extended info (seed, prompt) to filename when saving grid
   * @type {boolean}
   * @memberof Options
   */
  gridExtendedFilename?: boolean;
  /**
   * Do not save grids consisting of one picture
   * @type {boolean}
   * @memberof Options
   */
  gridOnlyIfMultiple?: boolean;
  /**
   * Prevent empty spots in grid (when set to autodetect)
   * @type {boolean}
   * @memberof Options
   */
  gridPreventEmptySpots?: boolean;
  /**
   * Grid row count; use -1 for autodetect and 0 for it to be same as batch size
   * @type {number}
   * @memberof Options
   */
  nRows?: number;
  /**
   * Save text information about generation parameters as chunks to png files
   * @type {boolean}
   * @memberof Options
   */
  enablePnginfo?: boolean;
  /**
   * Create a text file next to every image with generation parameters.
   * @type {boolean}
   * @memberof Options
   */
  saveTxt?: boolean;
  /**
   * Save a copy of image before doing face restoration.
   * @type {boolean}
   * @memberof Options
   */
  saveImagesBeforeFaceRestoration?: boolean;
  /**
   * Save a copy of image before applying highres fix.
   * @type {boolean}
   * @memberof Options
   */
  saveImagesBeforeHighresFix?: boolean;
  /**
   * Save a copy of image before applying color correction to img2img results
   * @type {boolean}
   * @memberof Options
   */
  saveImagesBeforeColorCorrection?: boolean;
  /**
   * Quality for saved jpeg images
   * @type {number}
   * @memberof Options
   */
  jpegQuality?: number;
  /**
   * Use lossless compression for webp images
   * @type {boolean}
   * @memberof Options
   */
  webpLossless?: boolean;
  /**
   * If the saved image file size is above the limit, or its either width or height are above the limit, save a downscaled copy as JPG
   * @type {boolean}
   * @memberof Options
   */
  exportFor4chan?: boolean;
  /**
   * File size limit for the above option, MB
   * @type {number}
   * @memberof Options
   */
  imgDownscaleThreshold?: number;
  /**
   * Width/height limit for the above option, in pixels
   * @type {number}
   * @memberof Options
   */
  targetSideLength?: number;
  /**
   * Maximum image size, in megapixels
   * @type {number}
   * @memberof Options
   */
  imgMaxSizeMp?: number;
  /**
   * Use original name for output filename during batch process in extras tab
   * @type {boolean}
   * @memberof Options
   */
  useOriginalNameBatch?: boolean;
  /**
   * Use upscaler name as filename suffix in the extras tab
   * @type {boolean}
   * @memberof Options
   */
  useUpscalerNameAsSuffix?: boolean;
  /**
   * When using 'Save' button, only save a single selected image
   * @type {boolean}
   * @memberof Options
   */
  saveSelectedOnly?: boolean;
  /**
   * Do not add watermark to images
   * @type {boolean}
   * @memberof Options
   */
  doNotAddWatermark?: boolean;
  /**
   * Directory for temporary images; leave empty for default
   * @type {string}
   * @memberof Options
   */
  tempDir?: string;
  /**
   * Cleanup non-default temporary directory when starting webui
   * @type {boolean}
   * @memberof Options
   */
  cleanTempDirAtStart?: boolean;
  /**
   * Output directory for images; if empty, defaults to three directories below
   * @type {string}
   * @memberof Options
   */
  outdirSamples?: string;
  /**
   * Output directory for txt2img images
   * @type {string}
   * @memberof Options
   */
  outdirTxt2imgSamples?: string;
  /**
   * Output directory for img2img images
   * @type {string}
   * @memberof Options
   */
  outdirImg2imgSamples?: string;
  /**
   * Output directory for images from extras tab
   * @type {string}
   * @memberof Options
   */
  outdirExtrasSamples?: string;
  /**
   * Output directory for grids; if empty, defaults to two directories below
   * @type {string}
   * @memberof Options
   */
  outdirGrids?: string;
  /**
   * Output directory for txt2img grids
   * @type {string}
   * @memberof Options
   */
  outdirTxt2imgGrids?: string;
  /**
   * Output directory for img2img grids
   * @type {string}
   * @memberof Options
   */
  outdirImg2imgGrids?: string;
  /**
   * Directory for saving images using the Save button
   * @type {string}
   * @memberof Options
   */
  outdirSave?: string;
  /**
   * Save images to a subdirectory
   * @type {boolean}
   * @memberof Options
   */
  saveToDirs?: boolean;
  /**
   * Save grids to a subdirectory
   * @type {boolean}
   * @memberof Options
   */
  gridSaveToDirs?: boolean;
  /**
   * When using "Save" button, save images to a subdirectory
   * @type {boolean}
   * @memberof Options
   */
  useSaveToDirsForUi?: boolean;
  /**
   * Directory name pattern
   * @type {string}
   * @memberof Options
   */
  directoriesFilenamePattern?: string;
  /**
   * Max prompt words for [prompt_words] pattern
   * @type {number}
   * @memberof Options
   */
  directoriesMaxPromptWords?: number;
  /**
   * Tile size for ESRGAN upscalers. 0 = no tiling.
   * @type {number}
   * @memberof Options
   */
  eSRGANTile?: number;
  /**
   * Tile overlap, in pixels for ESRGAN upscalers. Low values = visible seam.
   * @type {number}
   * @memberof Options
   */
  eSRGANTileOverlap?: number;
  /**
   * Select which Real-ESRGAN models to show in the web UI. (Requires restart)
   * @type {Array<any>}
   * @memberof Options
   */
  realesrganEnabledModels?: Array<any>;
  /**
   * Upscaler for img2img
   * @type {any}
   * @memberof Options
   */
  upscalerForImg2img?: any;
  /**
   * Face restoration model
   * @type {any}
   * @memberof Options
   */
  faceRestorationModel?: any;
  /**
   * CodeFormer weight parameter; 0 = maximum effect; 1 = minimum effect
   * @type {number}
   * @memberof Options
   */
  codeFormerWeight?: number;
  /**
   * Move face restoration model from VRAM into RAM after processing
   * @type {boolean}
   * @memberof Options
   */
  faceRestorationUnload?: boolean;
  /**
   * Show warnings in console.
   * @type {boolean}
   * @memberof Options
   */
  showWarnings?: boolean;
  /**
   * VRAM usage polls per second during generation. Set to 0 to disable.
   * @type {number}
   * @memberof Options
   */
  memmonPollRate?: number;
  /**
   * Always print all generation info to standard output
   * @type {boolean}
   * @memberof Options
   */
  samplesLogStdout?: boolean;
  /**
   * Add a second progress bar to the console that shows progress for an entire job.
   * @type {boolean}
   * @memberof Options
   */
  multipleTqdm?: boolean;
  /**
   * Print extra hypernetwork information to console.
   * @type {boolean}
   * @memberof Options
   */
  printHypernetExtra?: boolean;
  /**
   * Move VAE and CLIP to RAM when training if possible. Saves VRAM.
   * @type {boolean}
   * @memberof Options
   */
  unloadModelsWhenTraining?: boolean;
  /**
   * Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.
   * @type {boolean}
   * @memberof Options
   */
  pinMemory?: boolean;
  /**
   * Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.
   * @type {boolean}
   * @memberof Options
   */
  saveOptimizerState?: boolean;
  /**
   * Save textual inversion and hypernet settings to a text file whenever training starts.
   * @type {boolean}
   * @memberof Options
   */
  saveTrainingSettingsToTxt?: boolean;
  /**
   * Filename word regex
   * @type {string}
   * @memberof Options
   */
  datasetFilenameWordRegex?: string;
  /**
   * Filename join string
   * @type {string}
   * @memberof Options
   */
  datasetFilenameJoinString?: string;
  /**
   * Number of repeats for a single input image per epoch; used only for displaying epoch number
   * @type {number}
   * @memberof Options
   */
  trainingImageRepeatsPerEpoch?: number;
  /**
   * Save an csv containing the loss to log directory every N steps, 0 to disable
   * @type {number}
   * @memberof Options
   */
  trainingWriteCsvEvery?: number;
  /**
   * Use cross attention optimizations while training
   * @type {boolean}
   * @memberof Options
   */
  trainingXattentionOptimizations?: boolean;
  /**
   * Enable tensorboard logging.
   * @type {boolean}
   * @memberof Options
   */
  trainingEnableTensorboard?: boolean;
  /**
   * Save generated images within tensorboard.
   * @type {boolean}
   * @memberof Options
   */
  trainingTensorboardSaveImages?: boolean;
  /**
   * How often, in seconds, to flush the pending tensorboard events and summaries to disk.
   * @type {number}
   * @memberof Options
   */
  trainingTensorboardFlushEvery?: number;
  /**
   * Stable Diffusion checkpoint
   * @type {string}
   * @memberof Options
   */
  sdModelCheckpoint?: string;
  /**
   * Checkpoints to cache in RAM
   * @type {number}
   * @memberof Options
   */
  sdCheckpointCache?: number;
  /**
   * VAE Checkpoints to cache in RAM
   * @type {number}
   * @memberof Options
   */
  sdVaeCheckpointCache?: number;
  /**
   * SD VAE
   * @type {string}
   * @memberof Options
   */
  sdVae?: string;
  /**
   * Ignore selected VAE for stable diffusion checkpoints that have their own .vae.pt next to them
   * @type {boolean}
   * @memberof Options
   */
  sdVaeAsDefault?: boolean;
  /**
   * Inpainting conditioning mask strength
   * @type {number}
   * @memberof Options
   */
  inpaintingMaskWeight?: number;
  /**
   * Noise multiplier for img2img
   * @type {number}
   * @memberof Options
   */
  initialNoiseMultiplier?: number;
  /**
   * Apply color correction to img2img results to match original colors.
   * @type {boolean}
   * @memberof Options
   */
  img2imgColorCorrection?: boolean;
  /**
   * With img2img, do exactly the amount of steps the slider specifies (normally you'd do less with less denoising).
   * @type {boolean}
   * @memberof Options
   */
  img2imgFixSteps?: boolean;
  /**
   * With img2img, fill image's transparent parts with this color.
   * @type {string}
   * @memberof Options
   */
  img2imgBackgroundColor?: string;
  /**
   * Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds. Requires restart to apply.
   * @type {boolean}
   * @memberof Options
   */
  enableQuantization?: boolean;
  /**
   * Emphasis: use (text) to make model pay more attention to text and [text] to make it pay less attention
   * @type {boolean}
   * @memberof Options
   */
  enableEmphasis?: boolean;
  /**
   * Make K-diffusion samplers produce same images in a batch as when making a single image
   * @type {boolean}
   * @memberof Options
   */
  enableBatchSeeds?: boolean;
  /**
   * Increase coherency by padding from the last comma within n tokens when using more than 75 tokens
   * @type {number}
   * @memberof Options
   */
  commaPaddingBacktrack?: number;
  /**
   * Clip skip
   * @type {number}
   * @memberof Options
   */
  cLIPStopAtLastLayers?: number;
  /**
   * Upcast cross attention layer to float32
   * @type {boolean}
   * @memberof Options
   */
  upcastAttn?: boolean;
  /**
   * Use old emphasis implementation. Can be useful to reproduce old seeds.
   * @type {boolean}
   * @memberof Options
   */
  useOldEmphasisImplementation?: boolean;
  /**
   * Use old karras scheduler sigmas (0.1 to 10).
   * @type {boolean}
   * @memberof Options
   */
  useOldKarrasSchedulerSigmas?: boolean;
  /**
   * Do not make DPM++ SDE deterministic across different batch sizes.
   * @type {boolean}
   * @memberof Options
   */
  noDpmppSdeBatchDeterminism?: boolean;
  /**
   * For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).
   * @type {boolean}
   * @memberof Options
   */
  useOldHiresFixWidthHeight?: boolean;
  /**
   * Interrogate: keep models in VRAM
   * @type {boolean}
   * @memberof Options
   */
  interrogateKeepModelsInMemory?: boolean;
  /**
   * Interrogate: include ranks of model tags matches in results (Has no effect on caption-based interrogators).
   * @type {boolean}
   * @memberof Options
   */
  interrogateReturnRanks?: boolean;
  /**
   * Interrogate: num_beams for BLIP
   * @type {number}
   * @memberof Options
   */
  interrogateClipNumBeams?: number;
  /**
   * Interrogate: minimum description length (excluding artists, etc..)
   * @type {number}
   * @memberof Options
   */
  interrogateClipMinLength?: number;
  /**
   * Interrogate: maximum description length
   * @type {number}
   * @memberof Options
   */
  interrogateClipMaxLength?: number;
  /**
   * CLIP: maximum number of lines in text file (0 = No limit)
   * @type {number}
   * @memberof Options
   */
  interrogateClipDictLimit?: number;
  /**
   * CLIP: skip inquire categories
   * @type {Array<any>}
   * @memberof Options
   */
  interrogateClipSkipCategories?: Array<any>;
  /**
   * Interrogate: deepbooru score threshold
   * @type {number}
   * @memberof Options
   */
  interrogateDeepbooruScoreThreshold?: number;
  /**
   * Interrogate: deepbooru sort alphabetically
   * @type {boolean}
   * @memberof Options
   */
  deepbooruSortAlpha?: boolean;
  /**
   * use spaces for tags in deepbooru
   * @type {boolean}
   * @memberof Options
   */
  deepbooruUseSpaces?: boolean;
  /**
   * escape (\) brackets in deepbooru (so they are used as literal brackets and not for emphasis)
   * @type {boolean}
   * @memberof Options
   */
  deepbooruEscape?: boolean;
  /**
   * filter out those tags from deepbooru output (separated by comma)
   * @type {string}
   * @memberof Options
   */
  deepbooruFilterTags?: string;
  /**
   * Default view for Extra Networks
   * @type {string}
   * @memberof Options
   */
  extraNetworksDefaultView?: string;
  /**
   * Multiplier for extra networks
   * @type {number}
   * @memberof Options
   */
  extraNetworksDefaultMultiplier?: number;
  /**
   * Extra text to add before <...> when adding extra network to prompt
   * @type {string}
   * @memberof Options
   */
  extraNetworksAddTextSeparator?: string;
  /**
   * Add hypernetwork to prompt
   * @type {string}
   * @memberof Options
   */
  sdHypernetwork?: string;
  /**
   * Show grid in results for web
   * @type {boolean}
   * @memberof Options
   */
  returnGrid?: boolean;
  /**
   * Do not show any images in results for web
   * @type {boolean}
   * @memberof Options
   */
  doNotShowImages?: boolean;
  /**
   * Add model hash to generation information
   * @type {boolean}
   * @memberof Options
   */
  addModelHashToInfo?: boolean;
  /**
   * Add model name to generation information
   * @type {boolean}
   * @memberof Options
   */
  addModelNameToInfo?: boolean;
  /**
   * When reading generation parameters from text into UI (from PNG info or pasted text), do not change the selected model/checkpoint.
   * @type {boolean}
   * @memberof Options
   */
  disableWeightsAutoSwap?: boolean;
  /**
   * Send seed when sending prompt or image to other interface
   * @type {boolean}
   * @memberof Options
   */
  sendSeed?: boolean;
  /**
   * Send size when sending prompt or image to another interface
   * @type {boolean}
   * @memberof Options
   */
  sendSize?: boolean;
  /**
   * Font for image grids that have text
   * @type {string}
   * @memberof Options
   */
  font?: string;
  /**
   * Enable full page image viewer
   * @type {boolean}
   * @memberof Options
   */
  jsModalLightbox?: boolean;
  /**
   * Show images zoomed in by default in full page image viewer
   * @type {boolean}
   * @memberof Options
   */
  jsModalLightboxInitiallyZoomed?: boolean;
  /**
   * Show generation progress in window title.
   * @type {boolean}
   * @memberof Options
   */
  showProgressInTitle?: boolean;
  /**
   * Use dropdown for sampler selection instead of radio group
   * @type {boolean}
   * @memberof Options
   */
  samplersInDropdown?: boolean;
  /**
   * Show Width/Height and Batch sliders in same row
   * @type {boolean}
   * @memberof Options
   */
  dimensionsAndBatchTogether?: boolean;
  /**
   * Ctrl+up/down precision when editing (attention:1.1)
   * @type {number}
   * @memberof Options
   */
  keyeditPrecisionAttention?: number;
  /**
   * Ctrl+up/down precision when editing <extra networks:0.9>
   * @type {number}
   * @memberof Options
   */
  keyeditPrecisionExtra?: number;
  /**
   * Quicksettings list
   * @type {string}
   * @memberof Options
   */
  quicksettings?: string;
  /**
   * Hidden UI tabs (requires restart)
   * @type {Array<any>}
   * @memberof Options
   */
  hiddenTabs?: Array<any>;
  /**
   * txt2img/img2img UI item order
   * @type {string}
   * @memberof Options
   */
  uiReorder?: string;
  /**
   * Extra networks tab order
   * @type {string}
   * @memberof Options
   */
  uiExtraNetworksTabReorder?: string;
  /**
   * Localization (requires restart)
   * @type {string}
   * @memberof Options
   */
  localization?: string;
  /**
   * Show progressbar
   * @type {boolean}
   * @memberof Options
   */
  showProgressbar?: boolean;
  /**
   * Show live previews of the created image
   * @type {boolean}
   * @memberof Options
   */
  livePreviewsEnable?: boolean;
  /**
   * Show previews of all images generated in a batch as a grid
   * @type {boolean}
   * @memberof Options
   */
  showProgressGrid?: boolean;
  /**
   * Show new live preview image every N sampling steps. Set to -1 to show after completion of batch.
   * @type {number}
   * @memberof Options
   */
  showProgressEveryNSteps?: number;
  /**
   * Image creation progress preview mode
   * @type {string}
   * @memberof Options
   */
  showProgressType?: string;
  /**
   * Live preview subject
   * @type {string}
   * @memberof Options
   */
  livePreviewContent?: string;
  /**
   * Progressbar/preview update period, in milliseconds
   * @type {number}
   * @memberof Options
   */
  livePreviewRefreshPeriod?: number;
  /**
   * Hide samplers in user interface (requires restart)
   * @type {Array<any>}
   * @memberof Options
   */
  hideSamplers?: Array<any>;
  /**
   * eta (noise multiplier) for DDIM
   * @type {number}
   * @memberof Options
   */
  etaDdim?: number;
  /**
   * eta (noise multiplier) for ancestral samplers
   * @type {number}
   * @memberof Options
   */
  etaAncestral?: number;
  /**
   * img2img DDIM discretize
   * @type {string}
   * @memberof Options
   */
  ddimDiscretize?: string;
  /**
   * sigma churn
   * @type {number}
   * @memberof Options
   */
  sChurn?: number;
  /**
   * sigma tmin
   * @type {number}
   * @memberof Options
   */
  sTmin?: number;
  /**
   * sigma noise
   * @type {number}
   * @memberof Options
   */
  sNoise?: number;
  /**
   * Eta noise seed delta
   * @type {number}
   * @memberof Options
   */
  etaNoiseSeedDelta?: number;
  /**
   * Always discard next-to-last sigma
   * @type {boolean}
   * @memberof Options
   */
  alwaysDiscardNextToLastSigma?: boolean;
  /**
   * UniPC variant
   * @type {string}
   * @memberof Options
   */
  uniPcVariant?: string;
  /**
   * UniPC skip type
   * @type {string}
   * @memberof Options
   */
  uniPcSkipType?: string;
  /**
   * UniPC order (must be < sampling steps)
   * @type {number}
   * @memberof Options
   */
  uniPcOrder?: number;
  /**
   * UniPC lower order final
   * @type {boolean}
   * @memberof Options
   */
  uniPcLowerOrderFinal?: boolean;
  /**
   * Enable postprocessing operations in txt2img and img2img tabs
   * @type {Array<any>}
   * @memberof Options
   */
  postprocessingEnableInMainUi?: Array<any>;
  /**
   * Postprocessing operation order
   * @type {Array<any>}
   * @memberof Options
   */
  postprocessingOperationOrder?: Array<any>;
  /**
   * Maximum number of images in upscaling cache
   * @type {number}
   * @memberof Options
   */
  upscalingMaxImagesInCache?: number;
  /**
   * Disable those extensions
   * @type {Array<any>}
   * @memberof Options
   */
  disabledExtensions?: Array<any>;
  /**
   * SHA256 hash of the current checkpoint
   * @type {string}
   * @memberof Options
   */
  sdCheckpointHash?: string;
  /**
   * Add Lora to prompt
   * @type {string}
   * @memberof Options
   */
  sdLora?: string;
  /**
   * Apply Lora to outputs rather than inputs when possible (experimental)
   * @type {boolean}
   * @memberof Options
   */
  loraApplyToOutputs?: boolean;
}

/**
 * Check if a given object implements the Options interface.
 */
export function instanceOfOptions(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function OptionsFromJSON(json: any): Options {
  return OptionsFromJSONTyped(json, false);
}

export function OptionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Options {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    samplesSave: !exists(json, "samples_save")
      ? undefined
      : json["samples_save"],
    samplesFormat: !exists(json, "samples_format")
      ? undefined
      : json["samples_format"],
    samplesFilenamePattern: !exists(json, "samples_filename_pattern")
      ? undefined
      : json["samples_filename_pattern"],
    saveImagesAddNumber: !exists(json, "save_images_add_number")
      ? undefined
      : json["save_images_add_number"],
    gridSave: !exists(json, "grid_save") ? undefined : json["grid_save"],
    gridFormat: !exists(json, "grid_format") ? undefined : json["grid_format"],
    gridExtendedFilename: !exists(json, "grid_extended_filename")
      ? undefined
      : json["grid_extended_filename"],
    gridOnlyIfMultiple: !exists(json, "grid_only_if_multiple")
      ? undefined
      : json["grid_only_if_multiple"],
    gridPreventEmptySpots: !exists(json, "grid_prevent_empty_spots")
      ? undefined
      : json["grid_prevent_empty_spots"],
    nRows: !exists(json, "n_rows") ? undefined : json["n_rows"],
    enablePnginfo: !exists(json, "enable_pnginfo")
      ? undefined
      : json["enable_pnginfo"],
    saveTxt: !exists(json, "save_txt") ? undefined : json["save_txt"],
    saveImagesBeforeFaceRestoration: !exists(
      json,
      "save_images_before_face_restoration"
    )
      ? undefined
      : json["save_images_before_face_restoration"],
    saveImagesBeforeHighresFix: !exists(json, "save_images_before_highres_fix")
      ? undefined
      : json["save_images_before_highres_fix"],
    saveImagesBeforeColorCorrection: !exists(
      json,
      "save_images_before_color_correction"
    )
      ? undefined
      : json["save_images_before_color_correction"],
    jpegQuality: !exists(json, "jpeg_quality")
      ? undefined
      : json["jpeg_quality"],
    webpLossless: !exists(json, "webp_lossless")
      ? undefined
      : json["webp_lossless"],
    exportFor4chan: !exists(json, "export_for_4chan")
      ? undefined
      : json["export_for_4chan"],
    imgDownscaleThreshold: !exists(json, "img_downscale_threshold")
      ? undefined
      : json["img_downscale_threshold"],
    targetSideLength: !exists(json, "target_side_length")
      ? undefined
      : json["target_side_length"],
    imgMaxSizeMp: !exists(json, "img_max_size_mp")
      ? undefined
      : json["img_max_size_mp"],
    useOriginalNameBatch: !exists(json, "use_original_name_batch")
      ? undefined
      : json["use_original_name_batch"],
    useUpscalerNameAsSuffix: !exists(json, "use_upscaler_name_as_suffix")
      ? undefined
      : json["use_upscaler_name_as_suffix"],
    saveSelectedOnly: !exists(json, "save_selected_only")
      ? undefined
      : json["save_selected_only"],
    doNotAddWatermark: !exists(json, "do_not_add_watermark")
      ? undefined
      : json["do_not_add_watermark"],
    tempDir: !exists(json, "temp_dir") ? undefined : json["temp_dir"],
    cleanTempDirAtStart: !exists(json, "clean_temp_dir_at_start")
      ? undefined
      : json["clean_temp_dir_at_start"],
    outdirSamples: !exists(json, "outdir_samples")
      ? undefined
      : json["outdir_samples"],
    outdirTxt2imgSamples: !exists(json, "outdir_txt2img_samples")
      ? undefined
      : json["outdir_txt2img_samples"],
    outdirImg2imgSamples: !exists(json, "outdir_img2img_samples")
      ? undefined
      : json["outdir_img2img_samples"],
    outdirExtrasSamples: !exists(json, "outdir_extras_samples")
      ? undefined
      : json["outdir_extras_samples"],
    outdirGrids: !exists(json, "outdir_grids")
      ? undefined
      : json["outdir_grids"],
    outdirTxt2imgGrids: !exists(json, "outdir_txt2img_grids")
      ? undefined
      : json["outdir_txt2img_grids"],
    outdirImg2imgGrids: !exists(json, "outdir_img2img_grids")
      ? undefined
      : json["outdir_img2img_grids"],
    outdirSave: !exists(json, "outdir_save") ? undefined : json["outdir_save"],
    saveToDirs: !exists(json, "save_to_dirs")
      ? undefined
      : json["save_to_dirs"],
    gridSaveToDirs: !exists(json, "grid_save_to_dirs")
      ? undefined
      : json["grid_save_to_dirs"],
    useSaveToDirsForUi: !exists(json, "use_save_to_dirs_for_ui")
      ? undefined
      : json["use_save_to_dirs_for_ui"],
    directoriesFilenamePattern: !exists(json, "directories_filename_pattern")
      ? undefined
      : json["directories_filename_pattern"],
    directoriesMaxPromptWords: !exists(json, "directories_max_prompt_words")
      ? undefined
      : json["directories_max_prompt_words"],
    eSRGANTile: !exists(json, "ESRGAN_tile") ? undefined : json["ESRGAN_tile"],
    eSRGANTileOverlap: !exists(json, "ESRGAN_tile_overlap")
      ? undefined
      : json["ESRGAN_tile_overlap"],
    realesrganEnabledModels: !exists(json, "realesrgan_enabled_models")
      ? undefined
      : json["realesrgan_enabled_models"],
    upscalerForImg2img: !exists(json, "upscaler_for_img2img")
      ? undefined
      : json["upscaler_for_img2img"],
    faceRestorationModel: !exists(json, "face_restoration_model")
      ? undefined
      : json["face_restoration_model"],
    codeFormerWeight: !exists(json, "code_former_weight")
      ? undefined
      : json["code_former_weight"],
    faceRestorationUnload: !exists(json, "face_restoration_unload")
      ? undefined
      : json["face_restoration_unload"],
    showWarnings: !exists(json, "show_warnings")
      ? undefined
      : json["show_warnings"],
    memmonPollRate: !exists(json, "memmon_poll_rate")
      ? undefined
      : json["memmon_poll_rate"],
    samplesLogStdout: !exists(json, "samples_log_stdout")
      ? undefined
      : json["samples_log_stdout"],
    multipleTqdm: !exists(json, "multiple_tqdm")
      ? undefined
      : json["multiple_tqdm"],
    printHypernetExtra: !exists(json, "print_hypernet_extra")
      ? undefined
      : json["print_hypernet_extra"],
    unloadModelsWhenTraining: !exists(json, "unload_models_when_training")
      ? undefined
      : json["unload_models_when_training"],
    pinMemory: !exists(json, "pin_memory") ? undefined : json["pin_memory"],
    saveOptimizerState: !exists(json, "save_optimizer_state")
      ? undefined
      : json["save_optimizer_state"],
    saveTrainingSettingsToTxt: !exists(json, "save_training_settings_to_txt")
      ? undefined
      : json["save_training_settings_to_txt"],
    datasetFilenameWordRegex: !exists(json, "dataset_filename_word_regex")
      ? undefined
      : json["dataset_filename_word_regex"],
    datasetFilenameJoinString: !exists(json, "dataset_filename_join_string")
      ? undefined
      : json["dataset_filename_join_string"],
    trainingImageRepeatsPerEpoch: !exists(
      json,
      "training_image_repeats_per_epoch"
    )
      ? undefined
      : json["training_image_repeats_per_epoch"],
    trainingWriteCsvEvery: !exists(json, "training_write_csv_every")
      ? undefined
      : json["training_write_csv_every"],
    trainingXattentionOptimizations: !exists(
      json,
      "training_xattention_optimizations"
    )
      ? undefined
      : json["training_xattention_optimizations"],
    trainingEnableTensorboard: !exists(json, "training_enable_tensorboard")
      ? undefined
      : json["training_enable_tensorboard"],
    trainingTensorboardSaveImages: !exists(
      json,
      "training_tensorboard_save_images"
    )
      ? undefined
      : json["training_tensorboard_save_images"],
    trainingTensorboardFlushEvery: !exists(
      json,
      "training_tensorboard_flush_every"
    )
      ? undefined
      : json["training_tensorboard_flush_every"],
    sdModelCheckpoint: !exists(json, "sd_model_checkpoint")
      ? undefined
      : json["sd_model_checkpoint"],
    sdCheckpointCache: !exists(json, "sd_checkpoint_cache")
      ? undefined
      : json["sd_checkpoint_cache"],
    sdVaeCheckpointCache: !exists(json, "sd_vae_checkpoint_cache")
      ? undefined
      : json["sd_vae_checkpoint_cache"],
    sdVae: !exists(json, "sd_vae") ? undefined : json["sd_vae"],
    sdVaeAsDefault: !exists(json, "sd_vae_as_default")
      ? undefined
      : json["sd_vae_as_default"],
    inpaintingMaskWeight: !exists(json, "inpainting_mask_weight")
      ? undefined
      : json["inpainting_mask_weight"],
    initialNoiseMultiplier: !exists(json, "initial_noise_multiplier")
      ? undefined
      : json["initial_noise_multiplier"],
    img2imgColorCorrection: !exists(json, "img2img_color_correction")
      ? undefined
      : json["img2img_color_correction"],
    img2imgFixSteps: !exists(json, "img2img_fix_steps")
      ? undefined
      : json["img2img_fix_steps"],
    img2imgBackgroundColor: !exists(json, "img2img_background_color")
      ? undefined
      : json["img2img_background_color"],
    enableQuantization: !exists(json, "enable_quantization")
      ? undefined
      : json["enable_quantization"],
    enableEmphasis: !exists(json, "enable_emphasis")
      ? undefined
      : json["enable_emphasis"],
    enableBatchSeeds: !exists(json, "enable_batch_seeds")
      ? undefined
      : json["enable_batch_seeds"],
    commaPaddingBacktrack: !exists(json, "comma_padding_backtrack")
      ? undefined
      : json["comma_padding_backtrack"],
    cLIPStopAtLastLayers: !exists(json, "CLIP_stop_at_last_layers")
      ? undefined
      : json["CLIP_stop_at_last_layers"],
    upcastAttn: !exists(json, "upcast_attn") ? undefined : json["upcast_attn"],
    useOldEmphasisImplementation: !exists(
      json,
      "use_old_emphasis_implementation"
    )
      ? undefined
      : json["use_old_emphasis_implementation"],
    useOldKarrasSchedulerSigmas: !exists(
      json,
      "use_old_karras_scheduler_sigmas"
    )
      ? undefined
      : json["use_old_karras_scheduler_sigmas"],
    noDpmppSdeBatchDeterminism: !exists(json, "no_dpmpp_sde_batch_determinism")
      ? undefined
      : json["no_dpmpp_sde_batch_determinism"],
    useOldHiresFixWidthHeight: !exists(json, "use_old_hires_fix_width_height")
      ? undefined
      : json["use_old_hires_fix_width_height"],
    interrogateKeepModelsInMemory: !exists(
      json,
      "interrogate_keep_models_in_memory"
    )
      ? undefined
      : json["interrogate_keep_models_in_memory"],
    interrogateReturnRanks: !exists(json, "interrogate_return_ranks")
      ? undefined
      : json["interrogate_return_ranks"],
    interrogateClipNumBeams: !exists(json, "interrogate_clip_num_beams")
      ? undefined
      : json["interrogate_clip_num_beams"],
    interrogateClipMinLength: !exists(json, "interrogate_clip_min_length")
      ? undefined
      : json["interrogate_clip_min_length"],
    interrogateClipMaxLength: !exists(json, "interrogate_clip_max_length")
      ? undefined
      : json["interrogate_clip_max_length"],
    interrogateClipDictLimit: !exists(json, "interrogate_clip_dict_limit")
      ? undefined
      : json["interrogate_clip_dict_limit"],
    interrogateClipSkipCategories: !exists(
      json,
      "interrogate_clip_skip_categories"
    )
      ? undefined
      : json["interrogate_clip_skip_categories"],
    interrogateDeepbooruScoreThreshold: !exists(
      json,
      "interrogate_deepbooru_score_threshold"
    )
      ? undefined
      : json["interrogate_deepbooru_score_threshold"],
    deepbooruSortAlpha: !exists(json, "deepbooru_sort_alpha")
      ? undefined
      : json["deepbooru_sort_alpha"],
    deepbooruUseSpaces: !exists(json, "deepbooru_use_spaces")
      ? undefined
      : json["deepbooru_use_spaces"],
    deepbooruEscape: !exists(json, "deepbooru_escape")
      ? undefined
      : json["deepbooru_escape"],
    deepbooruFilterTags: !exists(json, "deepbooru_filter_tags")
      ? undefined
      : json["deepbooru_filter_tags"],
    extraNetworksDefaultView: !exists(json, "extra_networks_default_view")
      ? undefined
      : json["extra_networks_default_view"],
    extraNetworksDefaultMultiplier: !exists(
      json,
      "extra_networks_default_multiplier"
    )
      ? undefined
      : json["extra_networks_default_multiplier"],
    extraNetworksAddTextSeparator: !exists(
      json,
      "extra_networks_add_text_separator"
    )
      ? undefined
      : json["extra_networks_add_text_separator"],
    sdHypernetwork: !exists(json, "sd_hypernetwork")
      ? undefined
      : json["sd_hypernetwork"],
    returnGrid: !exists(json, "return_grid") ? undefined : json["return_grid"],
    doNotShowImages: !exists(json, "do_not_show_images")
      ? undefined
      : json["do_not_show_images"],
    addModelHashToInfo: !exists(json, "add_model_hash_to_info")
      ? undefined
      : json["add_model_hash_to_info"],
    addModelNameToInfo: !exists(json, "add_model_name_to_info")
      ? undefined
      : json["add_model_name_to_info"],
    disableWeightsAutoSwap: !exists(json, "disable_weights_auto_swap")
      ? undefined
      : json["disable_weights_auto_swap"],
    sendSeed: !exists(json, "send_seed") ? undefined : json["send_seed"],
    sendSize: !exists(json, "send_size") ? undefined : json["send_size"],
    font: !exists(json, "font") ? undefined : json["font"],
    jsModalLightbox: !exists(json, "js_modal_lightbox")
      ? undefined
      : json["js_modal_lightbox"],
    jsModalLightboxInitiallyZoomed: !exists(
      json,
      "js_modal_lightbox_initially_zoomed"
    )
      ? undefined
      : json["js_modal_lightbox_initially_zoomed"],
    showProgressInTitle: !exists(json, "show_progress_in_title")
      ? undefined
      : json["show_progress_in_title"],
    samplersInDropdown: !exists(json, "samplers_in_dropdown")
      ? undefined
      : json["samplers_in_dropdown"],
    dimensionsAndBatchTogether: !exists(json, "dimensions_and_batch_together")
      ? undefined
      : json["dimensions_and_batch_together"],
    keyeditPrecisionAttention: !exists(json, "keyedit_precision_attention")
      ? undefined
      : json["keyedit_precision_attention"],
    keyeditPrecisionExtra: !exists(json, "keyedit_precision_extra")
      ? undefined
      : json["keyedit_precision_extra"],
    quicksettings: !exists(json, "quicksettings")
      ? undefined
      : json["quicksettings"],
    hiddenTabs: !exists(json, "hidden_tabs") ? undefined : json["hidden_tabs"],
    uiReorder: !exists(json, "ui_reorder") ? undefined : json["ui_reorder"],
    uiExtraNetworksTabReorder: !exists(json, "ui_extra_networks_tab_reorder")
      ? undefined
      : json["ui_extra_networks_tab_reorder"],
    localization: !exists(json, "localization")
      ? undefined
      : json["localization"],
    showProgressbar: !exists(json, "show_progressbar")
      ? undefined
      : json["show_progressbar"],
    livePreviewsEnable: !exists(json, "live_previews_enable")
      ? undefined
      : json["live_previews_enable"],
    showProgressGrid: !exists(json, "show_progress_grid")
      ? undefined
      : json["show_progress_grid"],
    showProgressEveryNSteps: !exists(json, "show_progress_every_n_steps")
      ? undefined
      : json["show_progress_every_n_steps"],
    showProgressType: !exists(json, "show_progress_type")
      ? undefined
      : json["show_progress_type"],
    livePreviewContent: !exists(json, "live_preview_content")
      ? undefined
      : json["live_preview_content"],
    livePreviewRefreshPeriod: !exists(json, "live_preview_refresh_period")
      ? undefined
      : json["live_preview_refresh_period"],
    hideSamplers: !exists(json, "hide_samplers")
      ? undefined
      : json["hide_samplers"],
    etaDdim: !exists(json, "eta_ddim") ? undefined : json["eta_ddim"],
    etaAncestral: !exists(json, "eta_ancestral")
      ? undefined
      : json["eta_ancestral"],
    ddimDiscretize: !exists(json, "ddim_discretize")
      ? undefined
      : json["ddim_discretize"],
    sChurn: !exists(json, "s_churn") ? undefined : json["s_churn"],
    sTmin: !exists(json, "s_tmin") ? undefined : json["s_tmin"],
    sNoise: !exists(json, "s_noise") ? undefined : json["s_noise"],
    etaNoiseSeedDelta: !exists(json, "eta_noise_seed_delta")
      ? undefined
      : json["eta_noise_seed_delta"],
    alwaysDiscardNextToLastSigma: !exists(
      json,
      "always_discard_next_to_last_sigma"
    )
      ? undefined
      : json["always_discard_next_to_last_sigma"],
    uniPcVariant: !exists(json, "uni_pc_variant")
      ? undefined
      : json["uni_pc_variant"],
    uniPcSkipType: !exists(json, "uni_pc_skip_type")
      ? undefined
      : json["uni_pc_skip_type"],
    uniPcOrder: !exists(json, "uni_pc_order")
      ? undefined
      : json["uni_pc_order"],
    uniPcLowerOrderFinal: !exists(json, "uni_pc_lower_order_final")
      ? undefined
      : json["uni_pc_lower_order_final"],
    postprocessingEnableInMainUi: !exists(
      json,
      "postprocessing_enable_in_main_ui"
    )
      ? undefined
      : json["postprocessing_enable_in_main_ui"],
    postprocessingOperationOrder: !exists(
      json,
      "postprocessing_operation_order"
    )
      ? undefined
      : json["postprocessing_operation_order"],
    upscalingMaxImagesInCache: !exists(json, "upscaling_max_images_in_cache")
      ? undefined
      : json["upscaling_max_images_in_cache"],
    disabledExtensions: !exists(json, "disabled_extensions")
      ? undefined
      : json["disabled_extensions"],
    sdCheckpointHash: !exists(json, "sd_checkpoint_hash")
      ? undefined
      : json["sd_checkpoint_hash"],
    sdLora: !exists(json, "sd_lora") ? undefined : json["sd_lora"],
    loraApplyToOutputs: !exists(json, "lora_apply_to_outputs")
      ? undefined
      : json["lora_apply_to_outputs"],
  };
}

export function OptionsToJSON(value?: Options | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    samples_save: value.samplesSave,
    samples_format: value.samplesFormat,
    samples_filename_pattern: value.samplesFilenamePattern,
    save_images_add_number: value.saveImagesAddNumber,
    grid_save: value.gridSave,
    grid_format: value.gridFormat,
    grid_extended_filename: value.gridExtendedFilename,
    grid_only_if_multiple: value.gridOnlyIfMultiple,
    grid_prevent_empty_spots: value.gridPreventEmptySpots,
    n_rows: value.nRows,
    enable_pnginfo: value.enablePnginfo,
    save_txt: value.saveTxt,
    save_images_before_face_restoration: value.saveImagesBeforeFaceRestoration,
    save_images_before_highres_fix: value.saveImagesBeforeHighresFix,
    save_images_before_color_correction: value.saveImagesBeforeColorCorrection,
    jpeg_quality: value.jpegQuality,
    webp_lossless: value.webpLossless,
    export_for_4chan: value.exportFor4chan,
    img_downscale_threshold: value.imgDownscaleThreshold,
    target_side_length: value.targetSideLength,
    img_max_size_mp: value.imgMaxSizeMp,
    use_original_name_batch: value.useOriginalNameBatch,
    use_upscaler_name_as_suffix: value.useUpscalerNameAsSuffix,
    save_selected_only: value.saveSelectedOnly,
    do_not_add_watermark: value.doNotAddWatermark,
    temp_dir: value.tempDir,
    clean_temp_dir_at_start: value.cleanTempDirAtStart,
    outdir_samples: value.outdirSamples,
    outdir_txt2img_samples: value.outdirTxt2imgSamples,
    outdir_img2img_samples: value.outdirImg2imgSamples,
    outdir_extras_samples: value.outdirExtrasSamples,
    outdir_grids: value.outdirGrids,
    outdir_txt2img_grids: value.outdirTxt2imgGrids,
    outdir_img2img_grids: value.outdirImg2imgGrids,
    outdir_save: value.outdirSave,
    save_to_dirs: value.saveToDirs,
    grid_save_to_dirs: value.gridSaveToDirs,
    use_save_to_dirs_for_ui: value.useSaveToDirsForUi,
    directories_filename_pattern: value.directoriesFilenamePattern,
    directories_max_prompt_words: value.directoriesMaxPromptWords,
    ESRGAN_tile: value.eSRGANTile,
    ESRGAN_tile_overlap: value.eSRGANTileOverlap,
    realesrgan_enabled_models: value.realesrganEnabledModels,
    upscaler_for_img2img: value.upscalerForImg2img,
    face_restoration_model: value.faceRestorationModel,
    code_former_weight: value.codeFormerWeight,
    face_restoration_unload: value.faceRestorationUnload,
    show_warnings: value.showWarnings,
    memmon_poll_rate: value.memmonPollRate,
    samples_log_stdout: value.samplesLogStdout,
    multiple_tqdm: value.multipleTqdm,
    print_hypernet_extra: value.printHypernetExtra,
    unload_models_when_training: value.unloadModelsWhenTraining,
    pin_memory: value.pinMemory,
    save_optimizer_state: value.saveOptimizerState,
    save_training_settings_to_txt: value.saveTrainingSettingsToTxt,
    dataset_filename_word_regex: value.datasetFilenameWordRegex,
    dataset_filename_join_string: value.datasetFilenameJoinString,
    training_image_repeats_per_epoch: value.trainingImageRepeatsPerEpoch,
    training_write_csv_every: value.trainingWriteCsvEvery,
    training_xattention_optimizations: value.trainingXattentionOptimizations,
    training_enable_tensorboard: value.trainingEnableTensorboard,
    training_tensorboard_save_images: value.trainingTensorboardSaveImages,
    training_tensorboard_flush_every: value.trainingTensorboardFlushEvery,
    sd_model_checkpoint: value.sdModelCheckpoint,
    sd_checkpoint_cache: value.sdCheckpointCache,
    sd_vae_checkpoint_cache: value.sdVaeCheckpointCache,
    sd_vae: value.sdVae,
    sd_vae_as_default: value.sdVaeAsDefault,
    inpainting_mask_weight: value.inpaintingMaskWeight,
    initial_noise_multiplier: value.initialNoiseMultiplier,
    img2img_color_correction: value.img2imgColorCorrection,
    img2img_fix_steps: value.img2imgFixSteps,
    img2img_background_color: value.img2imgBackgroundColor,
    enable_quantization: value.enableQuantization,
    enable_emphasis: value.enableEmphasis,
    enable_batch_seeds: value.enableBatchSeeds,
    comma_padding_backtrack: value.commaPaddingBacktrack,
    CLIP_stop_at_last_layers: value.cLIPStopAtLastLayers,
    upcast_attn: value.upcastAttn,
    use_old_emphasis_implementation: value.useOldEmphasisImplementation,
    use_old_karras_scheduler_sigmas: value.useOldKarrasSchedulerSigmas,
    no_dpmpp_sde_batch_determinism: value.noDpmppSdeBatchDeterminism,
    use_old_hires_fix_width_height: value.useOldHiresFixWidthHeight,
    interrogate_keep_models_in_memory: value.interrogateKeepModelsInMemory,
    interrogate_return_ranks: value.interrogateReturnRanks,
    interrogate_clip_num_beams: value.interrogateClipNumBeams,
    interrogate_clip_min_length: value.interrogateClipMinLength,
    interrogate_clip_max_length: value.interrogateClipMaxLength,
    interrogate_clip_dict_limit: value.interrogateClipDictLimit,
    interrogate_clip_skip_categories: value.interrogateClipSkipCategories,
    interrogate_deepbooru_score_threshold:
      value.interrogateDeepbooruScoreThreshold,
    deepbooru_sort_alpha: value.deepbooruSortAlpha,
    deepbooru_use_spaces: value.deepbooruUseSpaces,
    deepbooru_escape: value.deepbooruEscape,
    deepbooru_filter_tags: value.deepbooruFilterTags,
    extra_networks_default_view: value.extraNetworksDefaultView,
    extra_networks_default_multiplier: value.extraNetworksDefaultMultiplier,
    extra_networks_add_text_separator: value.extraNetworksAddTextSeparator,
    sd_hypernetwork: value.sdHypernetwork,
    return_grid: value.returnGrid,
    do_not_show_images: value.doNotShowImages,
    add_model_hash_to_info: value.addModelHashToInfo,
    add_model_name_to_info: value.addModelNameToInfo,
    disable_weights_auto_swap: value.disableWeightsAutoSwap,
    send_seed: value.sendSeed,
    send_size: value.sendSize,
    font: value.font,
    js_modal_lightbox: value.jsModalLightbox,
    js_modal_lightbox_initially_zoomed: value.jsModalLightboxInitiallyZoomed,
    show_progress_in_title: value.showProgressInTitle,
    samplers_in_dropdown: value.samplersInDropdown,
    dimensions_and_batch_together: value.dimensionsAndBatchTogether,
    keyedit_precision_attention: value.keyeditPrecisionAttention,
    keyedit_precision_extra: value.keyeditPrecisionExtra,
    quicksettings: value.quicksettings,
    hidden_tabs: value.hiddenTabs,
    ui_reorder: value.uiReorder,
    ui_extra_networks_tab_reorder: value.uiExtraNetworksTabReorder,
    localization: value.localization,
    show_progressbar: value.showProgressbar,
    live_previews_enable: value.livePreviewsEnable,
    show_progress_grid: value.showProgressGrid,
    show_progress_every_n_steps: value.showProgressEveryNSteps,
    show_progress_type: value.showProgressType,
    live_preview_content: value.livePreviewContent,
    live_preview_refresh_period: value.livePreviewRefreshPeriod,
    hide_samplers: value.hideSamplers,
    eta_ddim: value.etaDdim,
    eta_ancestral: value.etaAncestral,
    ddim_discretize: value.ddimDiscretize,
    s_churn: value.sChurn,
    s_tmin: value.sTmin,
    s_noise: value.sNoise,
    eta_noise_seed_delta: value.etaNoiseSeedDelta,
    always_discard_next_to_last_sigma: value.alwaysDiscardNextToLastSigma,
    uni_pc_variant: value.uniPcVariant,
    uni_pc_skip_type: value.uniPcSkipType,
    uni_pc_order: value.uniPcOrder,
    uni_pc_lower_order_final: value.uniPcLowerOrderFinal,
    postprocessing_enable_in_main_ui: value.postprocessingEnableInMainUi,
    postprocessing_operation_order: value.postprocessingOperationOrder,
    upscaling_max_images_in_cache: value.upscalingMaxImagesInCache,
    disabled_extensions: value.disabledExtensions,
    sd_checkpoint_hash: value.sdCheckpointHash,
    sd_lora: value.sdLora,
    lora_apply_to_outputs: value.loraApplyToOutputs,
  };
}
