/**
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AutoPhotoshopSDPluginAPIApi", () => {
  let instance: api.AutoPhotoshopSDPluginAPIApi
  beforeEach(function() {
    instance = new api.AutoPhotoshopSDPluginAPIApi(config)
  });

  test("changeSdUrlSdapiAutoPhotoshopSdSdUrlPost", () => {
    return expect(instance.changeSdUrlSdapiAutoPhotoshopSdSdUrlPost({})).resolves.toBe(null)
  })
  test("getInitImageHandleSdapiAutoPhotoshopSdGetInitImagePost", () => {
    return expect(instance.getInitImageHandleSdapiAutoPhotoshopSdGetInitImagePost({})).resolves.toBe(null)
  })
  test("getVersionSdapiAutoPhotoshopSdVersionGet", () => {
    return expect(instance.getVersionSdapiAutoPhotoshopSdVersionGet({})).resolves.toBe(null)
  })
  test("img2ImgHandleSdapiAutoPhotoshopSdImg2imgPost", () => {
    return expect(instance.img2ImgHandleSdapiAutoPhotoshopSdImg2imgPost({})).resolves.toBe(null)
  })
  test("loadHistorySdapiAutoPhotoshopSdHistoryLoadPost", () => {
    return expect(instance.loadHistorySdapiAutoPhotoshopSdHistoryLoadPost({})).resolves.toBe(null)
  })
  test("loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutLoadPost", () => {
    return expect(instance.loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutLoadPost({})).resolves.toBe(null)
  })
  test("loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutSavePost", () => {
    return expect(instance.loadPromptShortcutSdapiAutoPhotoshopSdPromptShortcutSavePost({})).resolves.toBe(null)
  })
  test("maskExpansionHandlerSdapiAutoPhotoshopSdMaskExpansionPost", () => {
    return expect(instance.maskExpansionHandlerSdapiAutoPhotoshopSdMaskExpansionPost({})).resolves.toBe(null)
  })
  test("openUrlSdapiAutoPhotoshopSdOpenUrlPost", () => {
    return expect(instance.openUrlSdapiAutoPhotoshopSdOpenUrlPost({})).resolves.toBe(null)
  })
  test("readRootSdapiAutoPhotoshopSdGet", () => {
    return expect(instance.readRootSdapiAutoPhotoshopSdGet({})).resolves.toBe(null)
  })
  test("savePngSdapiAutoPhotoshopSdSavePngPost", () => {
    return expect(instance.savePngSdapiAutoPhotoshopSdSavePngPost({})).resolves.toBe(null)
  })
  test("sdapiSdapiAutoPhotoshopSdConfigGet", () => {
    return expect(instance.sdapiSdapiAutoPhotoshopSdConfigGet({})).resolves.toBe(null)
  })
  test("sdapiSdapiAutoPhotoshopSdSdapiV1PathGet", () => {
    const path: string = "path_example"
    return expect(instance.sdapiSdapiAutoPhotoshopSdSdapiV1PathGet(path, {})).resolves.toBe(null)
  })
  test("sdapiSdapiAutoPhotoshopSdSdapiV1PathPost", () => {
    const path: string = "path_example"
    return expect(instance.sdapiSdapiAutoPhotoshopSdSdapiV1PathPost(path, {})).resolves.toBe(null)
  })
  test("searchImageSdapiAutoPhotoshopSdSearchImagePost", () => {
    return expect(instance.searchImageSdapiAutoPhotoshopSdSearchImagePost({})).resolves.toBe(null)
  })
  test("swapModelSdapiAutoPhotoshopSdSwapModelPost", () => {
    return expect(instance.swapModelSdapiAutoPhotoshopSdSwapModelPost({})).resolves.toBe(null)
  })
  test("txt2ImgHandleSdapiAutoPhotoshopSdTxt2imgPost", () => {
    return expect(instance.txt2ImgHandleSdapiAutoPhotoshopSdTxt2imgPost({})).resolves.toBe(null)
  })
})

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("appIdAppIdGet", () => {
    return expect(instance.appIdAppIdGet({})).resolves.toBe(null)
  })
  test("appIdAppIdGet_0", () => {
    return expect(instance.appIdAppIdGet_0({})).resolves.toBe(null)
  })
  test("buildResourceAssetsPathGet", () => {
    const path: string = "path_example"
    return expect(instance.buildResourceAssetsPathGet(path, {})).resolves.toBe(null)
  })
  test("controlnetImg2imgControlnetImg2imgPost", () => {
    const body: api.ControlNetStableDiffusionProcessingImg2Img = undefined
    return expect(instance.controlnetImg2imgControlnetImg2imgPost(body, {})).resolves.toBe(null)
  })
  test("controlnetTxt2imgControlnetTxt2imgPost", () => {
    const body: api.ControlNetStableDiffusionProcessingTxt2Img = undefined
    return expect(instance.controlnetTxt2imgControlnetTxt2imgPost(body, {})).resolves.toBe(null)
  })
  test("createEmbeddingSdapiV1CreateEmbeddingPost", () => {
    const body: api.any = undefined
    return expect(instance.createEmbeddingSdapiV1CreateEmbeddingPost(body, {})).resolves.toBe(null)
  })
  test("createHypernetworkSdapiV1CreateHypernetworkPost", () => {
    const body: api.any = undefined
    return expect(instance.createHypernetworkSdapiV1CreateHypernetworkPost(body, {})).resolves.toBe(null)
  })
  test("detectControlnetDetectPost", () => {
    const body: api.BodyDetectControlnetDetectPost = undefined
    return expect(instance.detectControlnetDetectPost(body, {})).resolves.toBe(null)
  })
  test("extrasBatchImagesApiSdapiV1ExtraBatchImagesPost", () => {
    const body: api.ExtrasBatchImagesRequest = undefined
    return expect(instance.extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(body, {})).resolves.toBe(null)
  })
  test("extrasSingleImageApiSdapiV1ExtraSingleImagePost", () => {
    const body: api.ExtrasSingleImageRequest = undefined
    return expect(instance.extrasSingleImageApiSdapiV1ExtraSingleImagePost(body, {})).resolves.toBe(null)
  })
  test("faviconFaviconIcoGet", () => {
    return expect(instance.faviconFaviconIcoGet({})).resolves.toBe(null)
  })
  test("fetchFileSdExtraNetworksThumbGet", () => {
    const filename: string = "filename_example"
    return expect(instance.fetchFileSdExtraNetworksThumbGet(filename, {})).resolves.toBe(null)
  })
  test("fileDeprecatedFilePathGet", () => {
    const path: string = "path_example"
    return expect(instance.fileDeprecatedFilePathGet(path, {})).resolves.toBe(null)
  })
  test("fileFilePathGet", () => {
    const path: string = "path_example"
    return expect(instance.fileFilePathGet(path, {})).resolves.toBe(null)
  })
  test("getCmdFlagsSdapiV1CmdFlagsGet", () => {
    return expect(instance.getCmdFlagsSdapiV1CmdFlagsGet({})).resolves.toBe(null)
  })
  test("getConfigConfigGet", () => {
    return expect(instance.getConfigConfigGet({})).resolves.toBe(null)
  })
  test("getConfigConfigGet_0", () => {
    return expect(instance.getConfigConfigGet_0({})).resolves.toBe(null)
  })
  test("getConfigSdapiV1OptionsGet", () => {
    return expect(instance.getConfigSdapiV1OptionsGet({})).resolves.toBe(null)
  })
  test("getCurrentUserUserGet", () => {
    return expect(instance.getCurrentUserUserGet({})).resolves.toBe(null)
  })
  test("getCurrentUserUserGet_0", () => {
    return expect(instance.getCurrentUserUserGet_0({})).resolves.toBe(null)
  })
  test("getEmbeddingsSdapiV1EmbeddingsGet", () => {
    return expect(instance.getEmbeddingsSdapiV1EmbeddingsGet({})).resolves.toBe(null)
  })
  test("getFaceRestorersSdapiV1FaceRestorersGet", () => {
    return expect(instance.getFaceRestorersSdapiV1FaceRestorersGet({})).resolves.toBe(null)
  })
  test("getHypernetworksSdapiV1HypernetworksGet", () => {
    return expect(instance.getHypernetworksSdapiV1HypernetworksGet({})).resolves.toBe(null)
  })
  test("getMemorySdapiV1MemoryGet", () => {
    return expect(instance.getMemorySdapiV1MemoryGet({})).resolves.toBe(null)
  })
  test("getPromptStylesSdapiV1PromptStylesGet", () => {
    return expect(instance.getPromptStylesSdapiV1PromptStylesGet({})).resolves.toBe(null)
  })
  test("getQueueStatusQueueStatusGet", () => {
    return expect(instance.getQueueStatusQueueStatusGet({})).resolves.toBe(null)
  })
  test("getRealesrganModelsSdapiV1RealesrganModelsGet", () => {
    return expect(instance.getRealesrganModelsSdapiV1RealesrganModelsGet({})).resolves.toBe(null)
  })
  test("getSamplersSdapiV1SamplersGet", () => {
    return expect(instance.getSamplersSdapiV1SamplersGet({})).resolves.toBe(null)
  })
  test("getScriptsListSdapiV1ScriptsGet", () => {
    return expect(instance.getScriptsListSdapiV1ScriptsGet({})).resolves.toBe(null)
  })
  test("getSdModelsSdapiV1SdModelsGet", () => {
    return expect(instance.getSdModelsSdapiV1SdModelsGet({})).resolves.toBe(null)
  })
  test("getTokenTokenGet", () => {
    return expect(instance.getTokenTokenGet({})).resolves.toBe(null)
  })
  test("getTokenTokenGet_0", () => {
    return expect(instance.getTokenTokenGet_0({})).resolves.toBe(null)
  })
  test("getUpscalersSdapiV1UpscalersGet", () => {
    return expect(instance.getUpscalersSdapiV1UpscalersGet({})).resolves.toBe(null)
  })
  test("img2imgapiSdapiV1Img2imgPost", () => {
    const body: api.StableDiffusionProcessingImg2Img = undefined
    return expect(instance.img2imgapiSdapiV1Img2imgPost(body, {})).resolves.toBe(null)
  })
  test("interrogateapiSdapiV1InterrogatePost", () => {
    const body: api.InterrogateRequest = undefined
    return expect(instance.interrogateapiSdapiV1InterrogatePost(body, {})).resolves.toBe(null)
  })
  test("interruptapiSdapiV1InterruptPost", () => {
    return expect(instance.interruptapiSdapiV1InterruptPost({})).resolves.toBe(null)
  })
  test("loginCheckLoginCheckGet", () => {
    return expect(instance.loginCheckLoginCheckGet({})).resolves.toBe(null)
  })
  test("loginCheckLoginCheckGet_0", () => {
    return expect(instance.loginCheckLoginCheckGet_0({})).resolves.toBe(null)
  })
  test("loginLoginPost", () => {
    const grantType: string = "grantType_example"
    const username: string = "username_example"
    const password: string = "password_example"
    const scope: string = "scope_example"
    const clientId: string = "clientId_example"
    const clientSecret: string = "clientSecret_example"
    return expect(instance.loginLoginPost(grantType, username, password, scope, clientId, clientSecret, {})).resolves.toBe(null)
  })
  test("loginLoginPost_0", () => {
    const grantType: string = "grantType_example"
    const username: string = "username_example"
    const password: string = "password_example"
    const scope: string = "scope_example"
    const clientId: string = "clientId_example"
    const clientSecret: string = "clientSecret_example"
    return expect(instance.loginLoginPost_0(grantType, username, password, scope, clientId, clientSecret, {})).resolves.toBe(null)
  })
  test("mainGet", () => {
    return expect(instance.mainGet({})).resolves.toBe(null)
  })
  test("mainHead", () => {
    return expect(instance.mainHead({})).resolves.toBe(null)
  })
  test("modelListControlnetModelListGet", () => {
    return expect(instance.modelListControlnetModelListGet({})).resolves.toBe(null)
  })
  test("moduleListControlnetModuleListGet", () => {
    return expect(instance.moduleListControlnetModuleListGet({})).resolves.toBe(null)
  })
  test("pnginfoapiSdapiV1PngInfoPost", () => {
    const body: api.PNGInfoRequest = undefined
    return expect(instance.pnginfoapiSdapiV1PngInfoPost(body, {})).resolves.toBe(null)
  })
  test("predictApiApiNamePost", () => {
    const body: api.PredictBody = undefined
    const apiName: string = "apiName_example"
    return expect(instance.predictApiApiNamePost(body, apiName, {})).resolves.toBe(null)
  })
  test("predictApiApiNamePost_0", () => {
    const body: api.PredictBody = undefined
    const apiName: string = "apiName_example"
    return expect(instance.predictApiApiNamePost_0(body, apiName, {})).resolves.toBe(null)
  })
  test("predictRunApiNamePost", () => {
    const body: api.PredictBody = undefined
    const apiName: string = "apiName_example"
    return expect(instance.predictRunApiNamePost(body, apiName, {})).resolves.toBe(null)
  })
  test("predictRunApiNamePost_0", () => {
    const body: api.PredictBody = undefined
    const apiName: string = "apiName_example"
    return expect(instance.predictRunApiNamePost_0(body, apiName, {})).resolves.toBe(null)
  })
  test("preprocessSdapiV1PreprocessPost", () => {
    const body: api.any = undefined
    return expect(instance.preprocessSdapiV1PreprocessPost(body, {})).resolves.toBe(null)
  })
  test("progressapiInternalProgressPost", () => {
    const body: api.ProgressRequest = undefined
    return expect(instance.progressapiInternalProgressPost(body, {})).resolves.toBe(null)
  })
  test("progressapiSdapiV1ProgressGet", () => {
    const skipCurrentImage: boolean = true
    return expect(instance.progressapiSdapiV1ProgressGet(skipCurrentImage, {})).resolves.toBe(null)
  })
  test("refreshCheckpointsSdapiV1RefreshCheckpointsPost", () => {
    return expect(instance.refreshCheckpointsSdapiV1RefreshCheckpointsPost({})).resolves.toBe(null)
  })
  test("resetIteratorResetPost", () => {
    const body: api.ResetBody = undefined
    return expect(instance.resetIteratorResetPost(body, {})).resolves.toBe(null)
  })
  test("resetIteratorResetPost_0", () => {
    const body: api.ResetBody = undefined
    return expect(instance.resetIteratorResetPost_0(body, {})).resolves.toBe(null)
  })
  test("robotsTxtRobotsTxtGet", () => {
    return expect(instance.robotsTxtRobotsTxtGet({})).resolves.toBe(null)
  })
  test("setConfigSdapiV1OptionsPost", () => {
    const body: api.any = undefined
    return expect(instance.setConfigSdapiV1OptionsPost(body, {})).resolves.toBe(null)
  })
  test("skipSdapiV1SkipPost", () => {
    return expect(instance.skipSdapiV1SkipPost({})).resolves.toBe(null)
  })
  test("startupEventsStartupEventsGet", () => {
    return expect(instance.startupEventsStartupEventsGet({})).resolves.toBe(null)
  })
  test("staticResourceStaticPathGet", () => {
    const path: string = "path_example"
    return expect(instance.staticResourceStaticPathGet(path, {})).resolves.toBe(null)
  })
  test("text2imgapiSdapiV1Txt2imgPost", () => {
    const body: api.StableDiffusionProcessingTxt2Img = undefined
    return expect(instance.text2imgapiSdapiV1Txt2imgPost(body, {})).resolves.toBe(null)
  })
  test("trainEmbeddingSdapiV1TrainEmbeddingPost", () => {
    const body: api.any = undefined
    return expect(instance.trainEmbeddingSdapiV1TrainEmbeddingPost(body, {})).resolves.toBe(null)
  })
  test("trainHypernetworkSdapiV1TrainHypernetworkPost", () => {
    const body: api.any = undefined
    return expect(instance.trainHypernetworkSdapiV1TrainHypernetworkPost(body, {})).resolves.toBe(null)
  })
  test("versionControlnetVersionGet", () => {
    return expect(instance.versionControlnetVersionGet({})).resolves.toBe(null)
  })
})

